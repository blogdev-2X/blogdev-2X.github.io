<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>rust写个操作系统——课程实验blogos移至armV8深度解析：实验七 死锁与简单处理</title>
    <link href="/b484f477.html"/>
    <url>/b484f477.html</url>
    
    <content type="html"><![CDATA[<div class="note note-info">            <blockquote><p>你将在每个实验对应分支上都看到这句话，确保作者实验代码在被下载后，能在正确的环境中运行。</p></blockquote><p>运行环境请参考: <a href="https://noionion.top/adfdff.html">lab1 环境搭建</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">cargo build<br>qemu-system-aarch64 -machine virt -m 1024M -cpu cortex-a53 -nographic -kernel target/aarch64-unknown-none-softfloat/debug/blogos_armv8 -semihosting<br></code></pre></td></tr></table></figure>          </div><h2 id="实验七-死锁与简单处理"><a href="#实验七-死锁与简单处理" class="headerlink" title="实验七 死锁与简单处理"></a>实验七 死锁与简单处理</h2><p>现在内核中存在一种并发的情形：定时器中断是异步发生的，因此它们可以随时中断我们的 <code>not_main</code> 函数。 幸运的是，Rust 的所有权系统可以在编译时防止许多种类型的与并发相关的错误。 但死锁是一个值得注意的例外。 如果一个线程试图获取一个永远不会释放的锁，就会发生死锁。 这样，线程将会无限期地处于挂起状态。</p><p>当多个任务访问同一个资源（数据）是就会引发竞争条件问题，这不仅在进程间会出现，在操作系统和进程间也会出现，此时就可能会产生死锁。另外的是多进程的死锁会显得更加有趣，我们的系统只有单进程系统，故在此不考虑。</p><hr><h3 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h3><p>了解竞争条件和死锁现象，并掌握处理这些问题的初步方法等。虽然在于一个没有调度的系统上讲有点奇怪，不过作为实验性课程也足够了</p><ol><li><p>死锁如何发生，如何在我们的内核中引发死锁</p></li><li><p>针对情况解决我们程序的死锁，以及了解更科学的死锁解决方式</p></li></ol><hr><h3 id="死锁原理"><a href="#死锁原理" class="headerlink" title="死锁原理"></a>死锁原理</h3><p>在单进程系统中，死锁更多的发生于进程对某一资源的竞争现象。例如我们在实验中中断等输出函数对<code>uart</code>硬件资源争夺。而多进程中的死锁更多的发生于两个不同进程发生了相互调用或资源竞争，互相等待对方结束进程的情况。这时候我们称系统产生了死锁或系统处于死锁状态。这些永远在等待状态的进程被称之为死锁进程。</p><p>死锁产生的原因一般可分为如下几种：</p><ol><li>竞争资源引起进程死锁</li></ol><p>  当系统中供多个进程共享的资源如打印机、公用队列的等，其数目不足以满足诸进程的需要时，会引起诸进程对资源的竞争而产生死锁。</p><p>  首先要理解一个概念：<strong>可剥夺资源</strong>和<strong>不可剥夺资源</strong></p><blockquote><p>系统中的资源可以分为两类，一类是可剥夺资源，是指某进程在获得这类资源后，该资源可以再被其他进程或系统剥夺。例如，优先权高的进程可以剥夺优先权低的进程的处理机。又如，内存区可由存储器管理程序，把一个进程从一个存储区移到另一个存储区，此即剥夺了该进程原来占有的存储区，甚至可将一进程从内存调到外存上，可见，CPU和主存均属于可剥夺性资源。</p><p>另一类资源是不可剥夺资源，当系统把这类资源分配给某进程后，再不能强行收回，只能在进程用完后自行释放，如磁带机、打印机等。</p></blockquote><ul><li><p>竞争不可剥夺资源</p><p>在系统中所配置的不可剥夺资源，由于它们的数量不能满足诸进程运行的需要，会使进程在运行过程中，因争夺这些资源而陷于僵局。例如，系统中只有一台打印机R1和一台磁带机R2，可供进程P1和P2共享。假定PI已占用了打印机R1，P2已占用了磁带机R2，若P2继续要求打印机R1，P2将阻塞；P1若又要求磁带机，P1也将阻塞。于是，在P1和P2之间就形成了僵局，两个进程都在等待对方释放自己所需要的资源，但是它们又都因不能继续获得自己所需要的资源而不能继续推进，从而也不能释放自己所占有的资源，以致进入死锁状态。</p></li><li><p>竞争临时资源</p><p>上面所说的打印机资源属于可顺序重复使用型资源，称为永久资源。还有一种所谓的临时资源，这是指由一个进程产生，被另一个进程使用，短时间后便无用的资源，故也称为消耗性资源，如硬件中断、信号、消息、缓冲区内的消息等，它也可能引起死锁。例如，SI，S2，S3是临时性资源，进程P1产生消息S1，又要求从P3接收消息S3；进程P3产生消息S3，又要求从进程P2处接收消息S2；进程P2产生消息S2，又要求从P1处接收产生的消息S1。如果消息通信按如下顺序进行：</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">P1:</span> ···Relese（<span class="hljs-built_in">S1</span>）；Request（<span class="hljs-built_in">S3</span>）； ···<br><span class="hljs-symbol">P2:</span> ···Relese（<span class="hljs-built_in">S2</span>）；Request（<span class="hljs-built_in">S1</span>）； ···<br><span class="hljs-symbol">P3:</span> ···Relese（<span class="hljs-built_in">S3</span>）；Request（<span class="hljs-built_in">S2</span>）； ···<br></code></pre></td></tr></table></figure><p>并不可能发生死锁。但若改成下述的运行顺序：</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">P1:</span> ···Request（<span class="hljs-built_in">S3</span>）；Relese（<span class="hljs-built_in">S1</span>）；···<br><span class="hljs-symbol">P2:</span> ···Request（<span class="hljs-built_in">S1</span>）；Relese（<span class="hljs-built_in">S2</span>）； ···<br><span class="hljs-symbol">P3:</span> ···Request（<span class="hljs-built_in">S2</span>）；Relese（<span class="hljs-built_in">S3</span>）； ···<br></code></pre></td></tr></table></figure></li></ul><ol start="2"><li>进程推进顺序不当引起死锁</li></ol><p>  由于进程在运行中具有异步性特征，这可能使P1和P2两个进程按下述两种顺序向前推进。</p><ol><li>进程推进顺序合法</li></ol><p>  当进程P1和P2并发执行时，如果按照下述顺序推进：</p>  <figure class="highlight tp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs tp"><span class="hljs-keyword">P</span><span class="hljs-number">1</span>: Request（<span class="hljs-keyword">R</span><span class="hljs-number">1</span>）; <span class="hljs-keyword">P</span><span class="hljs-number">2</span>: Request（<span class="hljs-keyword">R</span><span class="hljs-number">2</span>）; <span class="hljs-keyword">P</span><span class="hljs-number">1</span>: Relese（<span class="hljs-keyword">R</span><span class="hljs-number">1</span>）; <span class="hljs-keyword">P</span><span class="hljs-number">1</span>: Relese（<span class="hljs-keyword">R</span><span class="hljs-number">2</span>）;<br><span class="hljs-keyword">P</span><span class="hljs-number">2</span>: Request（<span class="hljs-keyword">R</span><span class="hljs-number">2</span>）; <span class="hljs-keyword">P</span><span class="hljs-number">2</span>: Request（<span class="hljs-keyword">R</span><span class="hljs-number">1</span>）; <span class="hljs-keyword">P</span><span class="hljs-number">2</span>: Relese（<span class="hljs-keyword">R</span><span class="hljs-number">2</span>）; <span class="hljs-keyword">P</span><span class="hljs-number">2</span>: Relese（<span class="hljs-keyword">R</span><span class="hljs-number">1</span>）;<br></code></pre></td></tr></table></figure><p>  这两个进程便可顺利完成，这种不会引起进程死锁的推进顺序是合法的。</p><ol start="2"><li>进程推进顺序非法</li></ol><p>  若P1保持了资源R1,P2保持了资源R2，系统处于不安全状态，因为这两个进程再向前推进，便可能发生死锁。</p><p>  例如，当P1运行到P1：Request（R2）时，将因R2已被P2占用而阻塞；当P2运行到P2：Request（R1）时，也将因R1已被P1占用而阻塞，于是发生进程死锁。</p><h3 id="引发死锁"><a href="#引发死锁" class="headerlink" title="引发死锁"></a>引发死锁</h3><p>我们制作的 blogos 现在只是一个单进程系统。故我们没办法以进程推进顺序不当的方式引发死锁。鉴于我们已经实现了中断，而且系统也没有不可剥夺资源可供我们进程竞争，故引发死锁就只有唯一一种路径：<strong>竞争临时资源</strong></p><p>uart 设备在系统中就属于这种可剥夺的临时资源。我们之前利用该硬件资源实现了屏幕输入与输出。</p><p>现在我们已经有了两个可用的中断：时钟中断和输入中断。这两个中断都使用了<code>print!</code>，即调用了 uart 硬件资源。然而这两个中断优先级相同，且我们并没有编写调度器，故这两个中断执行的是 FIFO 策略。故这两个中断不能互相的插入到对方进程中间，只会等到上一个中断处理完成才会进行。因此 uart 资源在中断执行期间被获取到释放是一个完整的过程，并不会被打断。</p><p>所以我们要在中断之外进行 uart 资源的占用，进而引发死锁。首先要明确的是，<code>print!</code>和<code>println!</code>宏中调用<code>uart_console::_print</code>函数，它使用自旋锁锁定一个全局的类<code>WRITER</code>:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-meta">#[doc(hidden)]</span><br><span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">_print</span>(args: fmt::Arguments) &#123;<br>    <span class="hljs-keyword">use</span> core::fmt::Write;<br>    WRITER.<span class="hljs-title function_ invoke__">lock</span>().<span class="hljs-title function_ invoke__">write_fmt</span>(args).<span class="hljs-title function_ invoke__">unwrap</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>它锁定了<code>WRITER</code>后，并在函数末尾隐式的解锁。但当我们在函数还未执行完之后异步的进入时钟中断或硬件中断之后，<code>WRITER</code>会处于一个未解锁的状态。而中断中的<code>print!</code>宏将尝试锁上<code>WRITER</code>类。</p><p>锁一个已经上锁的锁的锁显然是不可能的，而该步又是必要的。于是中断将一直卡死在尝试锁上<code>WRITER</code>类的状态上。此时资源的竞争则造成了系统的死锁状态。</p><p>了解了我们怎样去主动触发一个死锁的知识后，我们可以开始着手实现。首先是中断外要能成功占用 uart 资源，故我们选择在<code>src/main.rs</code>函数中调用<code>print!</code>；其次是增大<code>WRITER</code>类上锁时进入中断的概率，故我们选择将函数调用放在<code>loop</code>循环之中。由此在<code>src/main.rs</code>里<code>not_main</code>中修改：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// ...</span><br><span class="hljs-meta">#[no_mangle]</span> <span class="hljs-comment">// 不修改函数名</span><br><span class="hljs-keyword">pub</span> <span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">not_main</span>() &#123;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;[0] Hello from Rust!&quot;</span>);<br>    interrupts::<span class="hljs-title function_ invoke__">init_gicv2</span>();<br>    <span class="hljs-keyword">loop</span> &#123;<br>        <span class="hljs-built_in">print!</span>(<span class="hljs-string">&quot;-&quot;</span>);<br>    &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><p>正常流程应该是：</p><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs erlang-repl">进程调用print!宏 -&gt; print!宏锁定WRITER类 -&gt; print!宏调用结束，解锁WRITER类<br></code></pre></td></tr></table></figure><p>此时我们希望触发死锁的流程如下：</p><table><thead><tr><th>时间</th><th>not_main</th><th>中断</th></tr></thead><tbody><tr><td>0</td><td>调用<code>print!</code>宏</td><td></td></tr><tr><td>1</td><td><code>print!</code>宏锁定<code>WRITER</code>类</td><td></td></tr><tr><td>2</td><td></td><td>中断发生，开始处理中断</td></tr><tr><td>3</td><td></td><td>调用<code>print!</code>宏</td></tr><tr><td>4</td><td></td><td><code>print!</code>宏尝试上锁<code>WRITER</code>类（已被上锁）</td></tr><tr><td>5</td><td></td><td><code>print!</code>宏尝试上锁<code>WRITER</code>类（已被上锁）</td></tr><tr><td>6</td><td></td><td><code>print!</code>宏尝试上锁<code>WRITER</code>类（已被上锁）</td></tr><tr><td>…</td><td></td><td>…</td></tr><tr><td>无法出现</td><td><code>print!</code>宏调用结束，解锁<code>WRITER</code>类</td><td></td></tr></tbody></table><p>由于<code>WRITER</code>已经被锁定，所以中断处理程序将会一直等待，直到它被释放。但这种情况永远不会发生，因为<code>not_main</code>函数只有在中断处理程序返回后才继续运行。因此，整个系统就会挂起。</p><p>编译并运行内核，可以看到：</p><p><img src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/blogos-armv8/lock.png" alt="系统发生死锁"></p><p>此时系统产生第一次时间中断，而我们期望发生的事情发生了：<strong>时间中断尝试打点，但是它无法进行这一步</strong>。系统发生死锁了！</p><p>由于中断是异步发生的（硬件中断也可以实现相同的引发死锁操作），因此连字符的实际数量在两次运行之间会有所不同。这种不确定性使得与并发相关的错误很难调试。</p><h3 id="针对该情况的死锁预防"><a href="#针对该情况的死锁预防" class="headerlink" title="针对该情况的死锁预防"></a>针对该情况的死锁预防</h3><p>为了避免这种死锁，我们可以采取这样的方案：只要互斥锁<code>Mutex</code>是锁定的，就可以禁用中断。</p><p>当然，禁用中断不应该成为一种通用的解决方案。这一方案的弊端是，它会延长最坏情况下的中断等待时间，也就是系统对中断做出反应之前的时间。 因此，应该只在非常短的时间内禁用中断。</p><p>所以在这我更愿意理解为一个临时方法。当我们在调用<code>uart_console::_print</code>函数时（被<code>print!</code>宏和<code>println!</code>宏显式调用），我们将中断暂时禁用，以保证中断不会异步进行并抢占 uart 资源。只有当<code>WRITER</code>锁被释放我们才能重启中断。</p><p>修改<code>src/uart_console/mod.rs</code>中的<code>_print</code>函数：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-meta">#[doc(hidden)]</span><br><span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">_print</span>(args: fmt::Arguments) &#123;<br>    <span class="hljs-keyword">use</span> core::fmt::Write;<br>    <span class="hljs-keyword">unsafe</span> &#123;<br>            <span class="hljs-comment">// 关闭daif类型的中断</span><br>            asm!(<span class="hljs-string">&quot;msr daifset, #0xf&quot;</span>);<br>        &#125;<br>    WRITER.<span class="hljs-title function_ invoke__">lock</span>().<span class="hljs-title function_ invoke__">write_fmt</span>(args).<span class="hljs-title function_ invoke__">unwrap</span>();<br>    <span class="hljs-keyword">unsafe</span> &#123;<br>        <span class="hljs-comment">// 打开daif类型中断</span><br>        asm!(<span class="hljs-string">&quot;msr daifclr, #2&quot;</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在 armv8-arch64 架构下，控制cpu是否响应 IRQ,FIQ,SERROR,DEBUG 中断，是由<code>PSTATUS</code>(daif寄存器)控制的。异常位中的掩码位(DAIF)允许对异常事件进行屏蔽。当位被设置时，不接受该异常。</p><ul><li>D 调试异常掩码</li><li>A SError中断的处理状态掩码，例如，异步的外部中止。</li><li>I IRQ 中断的处理状态掩码</li><li>F FIQ 中断的处理状态掩码</li></ul><p>实验指导书中是锁释放后只打开 i 类型的中断（<code>asm!(&quot;msr daifclr, #2&quot;);</code>），这里需要注意的是我们在gic中断初始化中也只启用了这个类型的中断：<code>src/interrupts.rs</code>中启用<code>timer</code>设备的时候（原则上讲应该是保存原先的中断启用状态，然后按位复原，但是以我的rust水平还不能让我干这件事）</p><p>保证了<code>WRITER</code>类使用之时不会异步的进入一个中断后，我们再次编译尝试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">cargo build<br>qemu-system-aarch64 -machine virt -m 1024M -cpu cortex-a53 -nographic -kernel target/aarch64-unknown-none-softfloat/debug/blogos_armv8 -semihosting<br></code></pre></td></tr></table></figure><p><img src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/blogos-armv8/nolock.png" alt="时钟中断和输入中断都不会产生死锁"></p><h3 id="常规死锁解决办法"><a href="#常规死锁解决办法" class="headerlink" title="常规死锁解决办法"></a>常规死锁解决办法</h3><p>这部分是我们暂时没做的。在单进程系统中，短暂的禁用中断是一个可行做法，但并不明智。死锁发生的情况是要同时满足互斥、请求与保持、不可剥夺、循环等待这四个条件，缺一不可。于是我们尝试破坏其中一个条件即可：</p><p>破坏互斥相对是比较不科学的做法。而一次性请求所有资源又会造成进程饥饿。循环等待是由于多进程间互相依赖才会产生。故单进程系统的死锁科学处理方法只剩下了破坏不可抢占条件这条路。</p><p>所以我们在请求锁定的资源时可以使用<code>unlock</code>来破坏已有的锁，从而获取到对应的资源。但是这种情况较为复杂，原先的请求资源行为会崩溃，这里并不具体实现（我也还说不清这属于是破坏互斥还是破坏不可抢占）。</p><p>多线程情况下进程可能是由于进程之间循环调用产生的，还可以摧毁其中一个进程来保证其他进程继续进行，即破坏循环等待条件。</p>]]></content>
    
    
    <categories>
      
      <category>BlogOS_for_armv8</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Course</tag>
      
      <tag>os</tag>
      
      <tag>rust</tag>
      
      <tag>blogos</tag>
      
      <tag>armv8</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>rust写个操作系统——课程实验blogos移至armV8深度解析：实验六 GPIO关机</title>
    <link href="/ec262d5c.html"/>
    <url>/ec262d5c.html</url>
    
    <content type="html"><![CDATA[<div class="note note-info">            <blockquote><p>你将在每个实验对应分支上都看到这句话，确保作者实验代码在被下载后，能在正确的环境中运行。</p></blockquote><p>运行环境请参考: <a href="https://noionion.top/adfdff.html">lab1 环境搭建</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">cargo build<br>qemu-system-aarch64 -machine virt -m 1024M -cpu cortex-a53 -nographic -kernel target/aarch64-unknown-none-softfloat/debug/blogos_armv8 -semihosting<br></code></pre></td></tr></table></figure>          </div><h2 id="实验六-GPIO关机"><a href="#实验六-GPIO关机" class="headerlink" title="实验六 GPIO关机"></a>实验六 GPIO关机</h2><p>我们不能一直到qemu的暴力退出来关机（就是不用系统的关机而暴力断电）。所幸，virt机器为我们提供了GPIO来实现关机功能。这节我们将编写GPIO相关的驱动来实现关机功能。</p><hr><h3 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h3><p>实验指导书中这节也没有写实验目的。我大致把目的划分如下：</p><ol><li><p>编写pl061（GPIO）通用输入输出模块的驱动</p></li><li><p>实现关机功能</p></li></ol><hr><h3 id="pl061（GPIO）模块驱动编写"><a href="#pl061（GPIO）模块驱动编写" class="headerlink" title="pl061（GPIO）模块驱动编写"></a>pl061（GPIO）模块驱动编写</h3><p>上一实验我们已经对<code>tock-registers</code>有了基础的了解，恰好实验六终于是有点意思，开始让我们自己写驱动了。</p><p>所以在这节我们将做一个示例，讲述我们该如何去描述一个硬件的驱动。</p><h4 id="pl061（GPIO）基本知识"><a href="#pl061（GPIO）基本知识" class="headerlink" title="pl061（GPIO）基本知识"></a>pl061（GPIO）基本知识</h4><p>GPIO<code>（General-purpose input/output）</code>，通用型之输入输出的简称，功能类似8051的<code>P0—P3</code>，其接脚可以供使用者由程控自由使用，PIN脚依现实考量可作为通用输入（GPI）或通用输出（GPO）或通用输入与输出（GPIO），如当<code>clk generator</code>, <code>chip select</code>等。</p><p>既然一个引脚可以用于输入、输出或其他特殊功能，那么一定有寄存器用来选择这些功能。对于输入，一定可以通过读取某个寄存器来确定引脚电位的高低；对于输出，一定可以通过写入某个寄存器来让这个引脚输出高电位或者低电位；对于其他特殊功能，则有另外的寄存器来控制它们。</p><p>而在此实验中，我们用的<code>arm</code>架构的GPIO文档在此：<a href="https://developer.arm.com/documentation/ddi0190/b">ARM PrimeCell General Purpose Input&#x2F;Output (PL061) Technical Reference Manual</a></p><h4 id="virt机器关机原理"><a href="#virt机器关机原理" class="headerlink" title="virt机器关机原理"></a>virt机器关机原理</h4><p>查看设备树：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs vts">gpio-keys &#123;<br>        #address-cells = &lt;0x01&gt;;<br>        #size-cells = &lt;0x00&gt;;<br>        compatible = &quot;gpio-keys&quot;;<br><br>        poweroff &#123;<br>                gpios = &lt;0x8003 0x03 0x00&gt;;<br>                linux,code = &lt;0x74&gt;;<br>                label = &quot;GPIO Key Poweroff&quot;;<br>        &#125;;<br>&#125;;<br></code></pre></td></tr></table></figure><p><img src="https://os2022exps-doc.readthedocs.io/zh_CN/latest/_images/gpio-poweroff.png" alt="virt机器关机原理"></p><p>可以看到，关机键接入到了GPIO处理芯片的三号输入口（设备树上的反映在<code>gpio-keys</code>的<code>poweroff[&quot;gpios&quot;]</code>第二个参数反映。当外部输入关机指令时，三号线将产生一次信号并发生一次中断。让我们记住这一点，这是实现关机功能的关键。</p><h4 id="驱动编写实例"><a href="#驱动编写实例" class="headerlink" title="驱动编写实例"></a>驱动编写实例</h4><p>由于我们只需要实现关机功能，所以这里我们也并不定义额外的寄存器。之所以我在这里称之为一个示例，是因为我们并没有完整的实现它。</p><p>当我们向<code>GPIO</code>中输入关机指令时，<code>GPIORIS</code>（中断状态寄存器<code>PrimeCell GPIO raw interrupt status</code>）中的第三位将从<code>0</code>跳变到<code>1</code>。而当<code>GPIOIE</code>（中断掩码寄存器<code>PrimeCell GPIO interrupt mask</code>）中的第三位为<code>1</code>时，GPIO处理芯片将向GIC中断控制器发送一次中断，中断号为<code>39</code>。而我们受到中断后，需要丢此次GPIO中断进行清除，将<code>GPIOIC</code>（中断清除寄存器<code>PrimeCell GPIO interrupt clear</code>）的对应位置为<code>1</code>，然后进行关机操作。</p><p>另外在设备树文件中，关于GPIO的设备描述如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs vts">pl061@9030000 &#123;<br>        phandle = &lt;0x8003&gt;;<br>        clock-names = &quot;apb_pclk&quot;;<br>        clocks = &lt;0x8000&gt;;<br>        interrupts = &lt;0x00 0x07 0x04&gt;;<br>        gpio-controller;<br>        #gpio-cells = &lt;0x02&gt;;<br>        compatible = &quot;arm,pl061\0arm,primecell&quot;;<br>        reg = &lt;0x00 0x9030000 0x00 0x1000&gt;;<br>&#125;;<br></code></pre></td></tr></table></figure><p>可以看到GPIO设备的内存映射起始地址是<code>0x09030000</code>。</p><p>由于<code>GPIORIS</code>是一个只读寄存器，而我们知道一旦关机该寄存器的值将变为<code>0b00001000</code>（三号线产生的中断），在此我们并不需要将其在代码中体现。因此，我们在本节实验中，只需要定义<code>GPIOIE</code>和<code>GPIOIC</code>两个寄存器。</p><p>现在我们开始动手写驱动了，新建<code>src/pl061.rs</code>，先写入一个基本的模板。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">use</span> tock_registers::&#123;registers::&#123;ReadWrite, WriteOnly, ReadOnly&#125;, register_bitfields, register_structs&#125;;<br><br><span class="hljs-comment">// 寄存器基址定义</span><br><span class="hljs-keyword">pub</span> <span class="hljs-keyword">const</span> PL061REGS: *<span class="hljs-keyword">mut</span> PL061Regs = (<span class="hljs-number">0x0903_0000</span>) <span class="hljs-keyword">as</span> *<span class="hljs-keyword">mut</span> PL061Regs;<br><br><span class="hljs-comment">// 寄存器位级描述</span><br>register_bitfields! [<br>    <span class="hljs-type">u32</span>,<br>];<br><br><span class="hljs-comment">// 寄存器结构定义和映射描述</span><br>register_structs! &#123;<br>    <span class="hljs-keyword">pub</span> PL061Regs &#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们自顶向下，从<strong>寄存器结构定义和映射</strong>开始，在到<strong>寄存器位级细节</strong>进行对应的定义：</p><h5 id="寄存器基本结构描述"><a href="#寄存器基本结构描述" class="headerlink" title="寄存器基本结构描述"></a>寄存器基本结构描述</h5><p>首先是两个寄存器的定义，我们查看GPIO的寄存器表：<a href="https://developer.arm.com/documentation/ddi0190/b/programmer-s-model/summary-of-primecell-gpio-registers">Summary of PrimeCell GPIO registers</a>，找到我们需要的两个寄存器信息：</p><p><img src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/blogos-armv8/GPIOIE.png" alt="GPIOIE"></p><p><img src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/blogos-armv8/GPIOIC.png" alt="GPIOIC"></p><p>需要记下的是两个寄存器的基址和读写类型，我们可以作如下基本的定义：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 寄存器结构定义和映射描述</span><br>register_structs! &#123;<br>    <span class="hljs-keyword">pub</span> PL061Regs &#123;<br>        (<span class="hljs-number">0x410</span> =&gt; <span class="hljs-keyword">pub</span> ie: ReadWrite&lt;<span class="hljs-type">u32</span>&gt;),<br>        (<span class="hljs-number">0x41c</span> =&gt; <span class="hljs-keyword">pub</span> ic: WriteOnly&lt;<span class="hljs-type">u32</span>&gt;),<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>而<code>tock-registers</code>对寄存器结构定义有如下的要求，我用加粗标识出我们需要注意的部分：</p><blockquote><p>寄存器的定义是通过<code>register_structs</code>宏完成的，该宏要求每个寄存器有一个偏移量、一个字段名和一个类型。寄存器必须按<strong>偏移量的递增顺序</strong>和<strong>连续顺序</strong>声明。定义寄存器时，必须使用偏移量和<strong>间隙标识符（按照惯例，使用名为_reservedN的字段）显式注释间隙</strong>，但不使用类型。然后，宏将自动计算间隙大小并插入合适的填充结构。结构的<strong>末尾用大小和@end关键字标记</strong>，有效地指向寄存器列表后面的偏移量。</p></blockquote><p>寄存器基址从<code>0x000</code>开始，故我们填入空缺，并在最后一个寄存器的下一个地址填入<code>@end</code>标记：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 寄存器结构定义和映射描述</span><br>register_structs! &#123;<br>    <span class="hljs-keyword">pub</span> PL061Regs &#123;<br>        (<span class="hljs-number">0x000</span> =&gt; __reserved_0),<br>        (<span class="hljs-number">0x410</span> =&gt; <span class="hljs-keyword">pub</span> ie: ReadWrite&lt;<span class="hljs-type">u32</span>&gt;),<br>        (<span class="hljs-number">0x414</span> =&gt; __reserved_1),<br>        (<span class="hljs-number">0x41c</span> =&gt; <span class="hljs-keyword">pub</span> ic: WriteOnly&lt;<span class="hljs-type">u32</span>&gt;),<br>        (<span class="hljs-number">0x420</span> =&gt; @END),<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="寄存器位级细节"><a href="#寄存器位级细节" class="headerlink" title="寄存器位级细节"></a>寄存器位级细节</h5><p>首先是<code>GPIOIE</code>寄存器的细节定义，我们查看该寄存器的细节：<a href="https://developer.arm.com/documentation/ddi0190/b/programmer-s-model/register-descriptions/interrupt-mask-register--gpioie">Interrupt mask register, GPIOIE</a></p><p>可以知道每位的值即为对应输入输出线的中断掩码。例如第3号位（0开始）的中断启用，则应设置第三位的值为<code>1</code>。我们在<code>register_bitfields!</code>宏中写入我们需要的第三号位具体描述：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 寄存器位级描述</span><br>register_bitfields![<br>    <span class="hljs-type">u32</span>,<br><br>    <span class="hljs-comment">// PrimeCell GPIO interrupt mask</span><br>    <span class="hljs-keyword">pub</span> GPIOIE [<br>        IO3 <span class="hljs-title function_ invoke__">OFFSET</span>(<span class="hljs-number">3</span>) <span class="hljs-title function_ invoke__">NUMBITS</span>(<span class="hljs-number">1</span>) [<br>            Disabled = <span class="hljs-number">0</span>,<br>            Enabled = <span class="hljs-number">1</span><br>        ]<br>    ],<br>];<br></code></pre></td></tr></table></figure><blockquote><p>这里的<code>IO3</code>只是对三号位的一个命名，<code>OFFSET</code>偏移参数指明该位为第三号位，<code>NUMBITS</code>指明该位功能共有1位。你在其它的定义中可能会见到以两位甚至更多来存储对应信息。</p><p><code>IO3</code>下的键值更像是一种标识，定义后变可以以更方便的方式对寄存器进行读写。左边的命名是对右边赋值的解释。我们之后在解释时，不需要去记忆某一个位中赋值多少是什么功能，而可以通过命名去做精准的调用。例如<a href="https://github.com/tock/tock/blob/master/libraries/tock-register-interface/README.md">官方文档示例</a>中：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs rust">Control [<br>RANGE <span class="hljs-title function_ invoke__">OFFSET</span>(<span class="hljs-number">4</span>) <span class="hljs-title function_ invoke__">NUMBITS</span>(<span class="hljs-number">2</span>) [<br>    <span class="hljs-comment">// Each of these defines a name for a value that the bitfield can be</span><br>    <span class="hljs-comment">// written with or matched against. Note that this set is not exclusive--</span><br>    <span class="hljs-comment">// the field can still be written with arbitrary constants.</span><br>    VeryHigh = <span class="hljs-number">0</span>,<br>    High = <span class="hljs-number">1</span>,<br>    Low = <span class="hljs-number">2</span><br>]]<br></code></pre></td></tr></table></figure><p>我们在对<code>Control</code>寄存器的[4:6]号位赋值低电平时，只需要使用<code>xx::Control.write(xx::Control::Low)</code>，而无需记忆低电平是<code>0</code>还是<code>2</code></p></blockquote><p>然后我们需要将寄存器结构描述中的寄存器与其细节联系起来，修改<code>register_structs!</code>宏中的<code>0X410</code>一行：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-         (0x410 =&gt; pub ie: ReadWrite&lt;u32&gt;),</span><br><span class="hljs-addition">+         (0x410 =&gt; pub ie: ReadWrite&lt;u32, GPIOIE::Register&gt;),</span><br></code></pre></td></tr></table></figure><p>发生中断时，回调处理中<code>GPIOIC</code>寄存器的值我们可以直接写入<code>GPIOIE</code>来描述，这里对不对其进行细节描述并不重要。当然对其具体定义也不会有太大的问题。</p><p>而在模板开头我们引入了类型<code>READONLY</code>，而我们定义完寄存器后并没有使用它，因此删除这个引用。</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">- use tock_registers::&#123;registers::&#123;ReadWrite, WriteOnly, ReadOnly&#125;, register_bitfields, register_structs&#125;;</span><br><span class="hljs-addition">+ use tock_registers::&#123;registers::&#123;ReadWrite, WriteOnly&#125;, register_bitfields, register_structs&#125;;</span><br></code></pre></td></tr></table></figure><p>最后记得向<code>src/main.rs</code>中引入驱动：<code>mod pl061;</code>，最终的<code>pl061</code>模块驱动如下：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">use</span> tock_registers::&#123;registers::&#123;ReadWrite, WriteOnly&#125;, register_bitfields, register_structs&#125;;<br><br><span class="hljs-comment">// 寄存器结构定义和映射描述</span><br><span class="hljs-keyword">pub</span> <span class="hljs-keyword">const</span> PL061REGS: *<span class="hljs-keyword">mut</span> PL061Regs = (<span class="hljs-number">0x0903_0000</span>) <span class="hljs-keyword">as</span> *<span class="hljs-keyword">mut</span> PL061Regs;<br><br><span class="hljs-comment">// 寄存器位级描述</span><br>register_bitfields![<br>    <span class="hljs-type">u32</span>,<br><br>    <span class="hljs-comment">// PrimeCell GPIO interrupt mask</span><br>    <span class="hljs-keyword">pub</span> GPIOIE [<br>        IO3 <span class="hljs-title function_ invoke__">OFFSET</span>(<span class="hljs-number">3</span>) <span class="hljs-title function_ invoke__">NUMBITS</span>(<span class="hljs-number">1</span>) [<br>            Disabled = <span class="hljs-number">0</span>,<br>            Enabled = <span class="hljs-number">1</span><br>        ]<br>    ],<br>];<br><br><span class="hljs-comment">// 寄存器结构定义和映射描述</span><br>register_structs! &#123;<br>    <span class="hljs-keyword">pub</span> PL061Regs &#123;<br>        (<span class="hljs-number">0x000</span> =&gt; __reserved_0),<br>        (<span class="hljs-number">0x410</span> =&gt; <span class="hljs-keyword">pub</span> ie: ReadWrite&lt;<span class="hljs-type">u32</span>, GPIOIE::Register&gt;),<br>        (<span class="hljs-number">0x414</span> =&gt; __reserved_1),<br>        (<span class="hljs-number">0x41c</span> =&gt; <span class="hljs-keyword">pub</span> ic: WriteOnly&lt;<span class="hljs-type">u32</span>&gt;),<br>        (<span class="hljs-number">0x420</span> =&gt; @END),<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>个人也写了个较为完整的驱动（gpiodata那个描述可能有些问题），可以查看<a href="https://github.com/2X-ercha/blogOS-armV8/blob/lab6/src/pl061_all.rs">https://github.com/2X-ercha/blogOS-armV8/blob/lab6/src/pl061_all.rs</a></p><h3 id="实现关机中断及其处理回调函数"><a href="#实现关机中断及其处理回调函数" class="headerlink" title="实现关机中断及其处理回调函数"></a>实现关机中断及其处理回调函数</h3><p>关机中断仍然是<code>el1_irq</code>级别的中断，经过了上两个实验的回调函数编写，这部分可以说是熟门熟路了。</p><h4 id="关机中断初始化"><a href="#关机中断初始化" class="headerlink" title="关机中断初始化"></a>关机中断初始化</h4><p>同前两个中断一样，我们还是需要对输入中断进行启用和配置。同时不一样的是，我们还要为<code>GPIO</code>的<code>GPIOIE</code>中断掩码寄存器作初始化。修改<code>src/interrupts.rs</code>，新增如下内容：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// GPIO中断号39</span><br><span class="hljs-keyword">const</span> GPIO_IRQ: <span class="hljs-type">u32</span> = <span class="hljs-number">39</span>;<br><br><span class="hljs-keyword">use</span> tock_registers::interfaces::&#123;Readable, Writeable&#125;;<br><br><span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">init_gicv2</span>() &#123;<br>    <span class="hljs-comment">// ...</span><br><br>    <span class="hljs-comment">// 初始化GPIO中断</span><br>    <span class="hljs-title function_ invoke__">set_config</span>(GPIO_IRQ, ICFGR_LEVEL); <span class="hljs-comment">//电平触发</span><br>    <span class="hljs-title function_ invoke__">set_priority</span>(GPIO_IRQ, <span class="hljs-number">0</span>); <span class="hljs-comment">//优先级设定</span><br>    <span class="hljs-title function_ invoke__">clear</span>(GPIO_IRQ); <span class="hljs-comment">//清除中断请求</span><br>    <span class="hljs-title function_ invoke__">enable</span>(GPIO_IRQ); <span class="hljs-comment">//使能中断</span><br><br>    <span class="hljs-comment">// 使能GPIO的poweroff key中断</span><br>    <span class="hljs-keyword">use</span> crate::pl061::*;<br>    <span class="hljs-keyword">unsafe</span>&#123;<br>        <span class="hljs-keyword">let</span> <span class="hljs-variable">pl061r</span>: &amp;PL061Regs = &amp;*PL061REGS;<br><br>        <span class="hljs-comment">// 启用pl061 gpio中的3号线中断</span><br>        pl061r.ie.<span class="hljs-title function_ invoke__">write</span>(GPIOIE::IO3::Enabled);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="关机中断处理回调"><a href="#关机中断处理回调" class="headerlink" title="关机中断处理回调"></a>关机中断处理回调</h4><p>然后对关机中断进行处理：修改我们的中断实际处理函数<code>handle_irq_lines</code>为如下，并新增输入中断处理函数<code>handle_gpio_irq</code>：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">handle_irq_lines</span>(ctx: &amp;<span class="hljs-keyword">mut</span> ExceptionCtx, _core_num: <span class="hljs-type">u32</span>, irq_num: <span class="hljs-type">u32</span>) &#123;<br>    <span class="hljs-keyword">if</span> irq_num == TIMER_IRQ &#123;<br>        <span class="hljs-title function_ invoke__">handle_timer_irq</span>(ctx);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> irq_num == UART0_IRQ &#123;<br>        <span class="hljs-title function_ invoke__">handle_uart0_rx_irq</span>(ctx);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> irq_num == GPIO_IRQ &#123;<br>        <span class="hljs-title function_ invoke__">handle_gpio_irq</span>(ctx);<br>    &#125; <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-title function_ invoke__">catch</span>(ctx, EL1_IRQ);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">handle_gpio_irq</span>(_ctx: &amp;<span class="hljs-keyword">mut</span> ExceptionCtx)&#123;<br>    <span class="hljs-keyword">use</span> crate::pl061::*;<br>    crate::<span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;power off!\n&quot;</span>);<br>    <span class="hljs-keyword">unsafe</span> &#123;<br>        <span class="hljs-keyword">let</span> <span class="hljs-variable">pl061r</span>: &amp;PL061Regs = &amp;*PL061REGS;<br><br>        <span class="hljs-comment">// 清除中断信号 此时get到的应该是0x8</span><br>        pl061r.ic.<span class="hljs-title function_ invoke__">set</span>(pl061r.ie.<span class="hljs-title function_ invoke__">get</span>());<br>        <span class="hljs-comment">// 关机</span><br>        asm!(<span class="hljs-string">&quot;mov w0, #0x18&quot;</span>);<br>        asm!(<span class="hljs-string">&quot;hlt #0xF000&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们尝试关机，这里用到了<code>Arm</code>的<code>Semihosting</code>功能。</p><blockquote><p>Semihosting 的作用</p><p>Semihosting 能够让 bare-metal 的 ARM 设备通过拦截指定的 SVC 指令，在连操作系统都没有的环境中实现 POSIX 中的许多标准函数，比如 printf、scanf、open、read、write 等等。这些 IO 操作将被 Semihosting 协议转发到 Host 主机上，然后由主机代为执行。</p></blockquote><p>构建并运行内核。为了启用<code>semihosting</code>功能，在QEMU执行时需要加入<code>-semihosting</code>参数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">cargo build<br>qemu-system-aarch64 -machine virt -m 1024M -cpu cortex-a53 -nographic -kernel target/aarch64-unknown-none-softfloat/debug/blogos_armv8 -semihosting<br></code></pre></td></tr></table></figure><p>在系统执行过程中，在窗口按键<code>ctrl + a, c</code>，后输入<code>system_powerdown</code>关机。（这里为了实验更加直观，我注释掉了时间中断的打点输出）</p><p><img src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/blogos-armv8/powerdown.png" alt="关机！"></p>]]></content>
    
    
    <categories>
      
      <category>BlogOS_for_armv8</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Course</tag>
      
      <tag>os</tag>
      
      <tag>rust</tag>
      
      <tag>blogos</tag>
      
      <tag>armv8</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>rust写个操作系统——课程实验blogos移至armV8深度解析：实验五 输入</title>
    <link href="/82ab7cd4.html"/>
    <url>/82ab7cd4.html</url>
    
    <content type="html"><![CDATA[<div class="note note-info">            <blockquote><p>你将在每个实验对应分支上都看到这句话，确保作者实验代码在被下载后，能在正确的环境中运行。</p></blockquote><p>运行环境请参考: <a href="https://noionion.top/adfdff.html">lab1 环境搭建</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">cargo build<br>qemu-system-aarch64 -machine virt -m 1024M -cpu cortex-a53 -nographic -kernel target/aarch64-unknown-none-softfloat/debug/blogos_armv8 -semihosting<br></code></pre></td></tr></table></figure>          </div><h2 id="实验五-输入"><a href="#实验五-输入" class="headerlink" title="实验五 输入"></a>实验五 输入</h2><p>QEMU的virt机器默认没有键盘作为输入设备，但当我们执行QEMU使用 -nographic 参数（disable graphical output and redirect serial I&#x2F;Os to console）时QEMU会将串口重定向到控制台，因此我们可以使用UART作为输入设备。</p><p>同时这次实验也将顺便完成上一节没有完成的异常回调处理，我们将作对时钟中断和硬件中断的不同处理。</p><hr><h3 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h3><p>实验指导书中这节就没有写实验目的了。我大致把目的划分如下：</p><ol><li><p>完成实验四未完成的时钟中断处理回调</p></li><li><p>完成pl011（UART）异步串行接口的驱动编写</p></li><li><p>完成串口输入中断</p></li></ol><hr><h3 id="时钟中断回调函数实现"><a href="#时钟中断回调函数实现" class="headerlink" title="时钟中断回调函数实现"></a>时钟中断回调函数实现</h3><p>在上一个实验中，我们实现了时间中断，但没有对引发的时间中断做处理回调。我们先扫尾，然后再来处理输入中断。</p><p>我们知道，时间中断后引发的异常是<code>el1_irq</code>类中断，所以我们所需修改的是<code>src/interrupts.rs</code>文件中关于<code>el1_irq</code>的回调函数。原函数如下：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-meta">#[no_mangle]</span><br><span class="hljs-keyword">unsafe</span> <span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">el1_irq</span>(ctx: &amp;<span class="hljs-keyword">mut</span> ExceptionCtx) &#123;<br>    <span class="hljs-title function_ invoke__">catch</span>(ctx, EL1_IRQ);<br>&#125;<br></code></pre></td></tr></table></figure><p>我们需要的是实现对时钟的中断进行准确的分辨，所以我们需要在该异常被处发后，读取中断号并作相应处理。</p><p>当定时器触发时间中断后，中断控制器的<code>GICC_IAR</code>寄存器将被写入中断号<code>30</code>。结合上节的GICC寄存器表，我们在GICC寄存器处新增两个需要调用的寄存器地址映射，定义如下：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs diff">  //GICC寄存器基址<br>  const GICD_BASE: u64 = 0x08010000;<br><br>  //GICC实验所需寄存器<br>  const GICC_CTLR: *mut u32 = (GICC_BASE + 0x0) as *mut u32;<br>  const GICC_PMR: *mut u32 = (GICC_BASE + 0x0004) as *mut u32;<br>  const GICC_BPR: *mut u32 = (GICC_BASE + 0x0008) as *mut u32;<br><span class="hljs-addition">+ const GICC_IAR: *mut u32 = (GICC_BASE + 0x0c) as *mut u32;</span><br><span class="hljs-addition">+ const GICC_EOIR: *mut u32 = (GICC_BASE + 0x10) as *mut u32;</span><br></code></pre></td></tr></table></figure><ul><li><p><code>GICC_IAR</code>寄存器中存放的是当前的中断号。例如当时间中断发生时，寄存器中将写入中断号<code>30</code>（前5位）和对应的内核编号（后三位），我们可以通过读取该寄存器中的值来做中断号识别</p></li><li><p><code>GICC_EOIR</code>寄存器则用于标记某一中断被完成，即中断处理结束的信号。这个信号告诉控制器：中断已经被处理，并且系统已经准备好接收下一个中断。</p></li></ul><p>基于以上，我们可以根据<a href="https://documentation-service.arm.com/static/5f8ff196f86e16515cdbf969?token=">GIC手册</a>修改<code>el1_irq</code>处理回调函数，修改如下：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-meta">#[no_mangle]</span><br><span class="hljs-keyword">unsafe</span> <span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">el1_irq</span>(ctx: &amp;<span class="hljs-keyword">mut</span> ExceptionCtx) &#123;<br>    <span class="hljs-comment">// 中断确认（读取中断号和中断对应核）</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">value</span>: <span class="hljs-type">u32</span> = ptr::<span class="hljs-title function_ invoke__">read_volatile</span>(GICC_IAR);<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">irq_num</span>: <span class="hljs-type">u32</span> = value &amp; <span class="hljs-number">0x1ff</span>;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">core_num</span>: <span class="hljs-type">u32</span> = value &amp; <span class="hljs-number">0xe00</span>;<br><br>    <span class="hljs-comment">// 实际处理中断</span><br>    <span class="hljs-title function_ invoke__">handle_irq_lines</span>(ctx, core_num, irq_num);<br><br>    <span class="hljs-comment">// 中断完成标记信号</span><br>    ptr::<span class="hljs-title function_ invoke__">write_volatile</span>(GICC_EOIR, core_num | irq_num);<br><br>    <span class="hljs-comment">// 清除相应中断位</span><br>    <span class="hljs-title function_ invoke__">clear</span>(irq_num);<br>&#125;<br></code></pre></td></tr></table></figure><p>并编写中断处理函数<code>handle_irq_lines</code>：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">handle_irq_lines</span>(ctx: &amp;<span class="hljs-keyword">mut</span> ExceptionCtx, _core_num: <span class="hljs-type">u32</span>, irq_num: <span class="hljs-type">u32</span>) &#123;<br>    <span class="hljs-keyword">if</span> irq_num == TIMER_IRQ &#123;       <span class="hljs-comment">// 确认时间中断</span><br>        <span class="hljs-title function_ invoke__">handle_timer_irq</span>(ctx);<br>    &#125; <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-title function_ invoke__">catch</span>(ctx, EL1_IRQ);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 时间中断对应处理函数</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">handle_timer_irq</span>(_ctx: &amp;<span class="hljs-keyword">mut</span> ExceptionCtx)&#123;<br><br>    crate::<span class="hljs-built_in">print!</span>(<span class="hljs-string">&quot;.&quot;</span>);     <span class="hljs-comment">//我们令其每发生一次中断就打点一次，更直观的体现出发生时间中断</span><br><br>    <span class="hljs-comment">// 重置定时器，使其再过2秒产生一次中断</span><br>    <span class="hljs-keyword">unsafe</span> &#123;<br>        asm!(<span class="hljs-string">&quot;mrs x1, CNTFRQ_EL0&quot;</span>);<br>        asm!(<span class="hljs-string">&quot;add x1, x1, x1&quot;</span>);<br>        asm!(<span class="hljs-string">&quot;msr CNTP_TVAL_EL0, x1&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>大致的流程还是很好理解的，我们编译运行后看看效果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">cargo build<br>qemu-system-aarch64 -machine virt -m 1024M -cpu cortex-a53 -nographic -kernel target/aarch64-unknown-none-softfloat/debug/blogos_armv8<br></code></pre></td></tr></table></figure><p>效果如下（每两秒将会有一次打点）：</p><p><img src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/blogos-armv8/timer2s.png" alt="2s打点"></p><p>循环打点一方面是定时的功劳，另一方面是主函数中循环将系统置于低电平状态后的结果。每一次的中断处理后，系统将重新回到高电平运行状态。如果我们不采用<code>loop</code>轮询，将只会发生一次打点，此后及时重新到达定时器时间并发送了时钟中断，GIC也不会进行处理（因为设置的是低电平触发）。</p><h3 id="pl011（UART）异步串行接口驱动编写"><a href="#pl011（UART）异步串行接口驱动编写" class="headerlink" title="pl011（UART）异步串行接口驱动编写"></a>pl011（UART）异步串行接口驱动编写</h3><p>QEMU的virt机器默认没有键盘作为输入设备，但当我们执行QEMU使用<code>-nographic</code>参数（disable graphical output and redirect serial I&#x2F;Os to console）时QEMU会将串口重定向到控制台，因此我们可以使用UART作为输入设备。</p><p>通用异步收发传输器（Universal Asynchronous Receiver&#x2F;Transmitter)，通常称作UART。它将要传输的资料在串行通信与并行通信之间加以转换。作为把并行输入信号转成串行输出信号的芯片，UART通常被集成于其他通讯接口的连结上。</p><p>UART作为异步串口通信协议的一种，工作原理是将传输数据的每个字符一位接一位地传输。我们在控制台中的输入，也会被它传输到qemu中。</p><h4 id="tock-registers"><a href="#tock-registers" class="headerlink" title="tock-registers"></a>tock-registers</h4><p>在实验四中，针对GICD，GICC，TIMER等硬件我们定义了大量的常量和寄存器值，这在使用时过于繁琐也容易出错。于是我们决定使用<code>tock-registers</code>库。</p><p><code>tock-registers</code>提供了一些接口用于更好的定义寄存器。官方说明如下：</p><blockquote><p>The crate provides three types for working with memory mapped registers: <code>ReadWrite</code>, <code>ReadOnly</code>, and <code>WriteOnly</code>, providing read-write, read-only, and write-only functionality, respectively. These types implement the <code>Readable</code>, <code>Writeable</code> and <code>ReadWriteable</code>  traits.</p><p>Defining the registers is done with the <code>register_structs</code> macro, which expects for each register an offset, a field name, and a type. Registers must be declared in increasing order of offsets and contiguously. Gaps when defining the registers must be explicitly annotated with an offset and gap identifier (by convention using a field named <code>_reservedN</code>), but without a type. The macro will then automatically take care of calculating the gap size and inserting a suitable filler struct. The end of the struct is marked with its size and the <code>@END</code> keyword, effectively pointing to the offset immediately past the list of registers.</p></blockquote><p>翻译如下：</p><blockquote><p>tock-registers 提供了三种类型的内存映射寄存器：ReadWrite、ReadOnly和WriteOnly，分别提供读写、只读和只读功能。这些类型实现了可读、可写和可读写特性。</p><p>寄存器的定义是通过<code>register_structs</code>宏完成的，该宏要求每个寄存器有一个偏移量、一个字段名和一个类型。寄存器必须按偏移量的递增顺序和连续顺序声明。定义寄存器时，必须使用偏移量和间隙标识符（按照惯例，使用名为_reservedN的字段）显式注释间隙，但不使用类型。然后，宏将自动计算间隙大小并插入合适的填充结构。结构的末尾用大小和@end关键字标记，有效地指向寄存器列表后面的偏移量。</p></blockquote><p>根据官方的说明<a href="https://docs.rs/tock-registers/latest/tock_registers/">tock_registers</a>作为一个示例，我们来实现<code>pl011</code>串口驱动。</p><p>阅读设备树关于<code>pl011</code>部分内容（实验二）：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-title class_">pl011@9000000</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">clock-names</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;uartclk\0apb_pclk&quot;</span><span class="hljs-punctuation">;</span><br>    <span class="hljs-attr">clocks</span> <span class="hljs-operator">=</span> <span class="hljs-params">&lt;<span class="hljs-number">0x8000</span> <span class="hljs-number">0x8000</span>&gt;</span><span class="hljs-punctuation">;</span><br>    <span class="hljs-attr">interrupts</span> <span class="hljs-operator">=</span> <span class="hljs-params">&lt;<span class="hljs-number">0x00</span> <span class="hljs-number">0x01</span> <span class="hljs-number">0x04</span>&gt;</span><span class="hljs-punctuation">;</span><br>    <span class="hljs-attr">reg</span> <span class="hljs-operator">=</span> <span class="hljs-params">&lt;<span class="hljs-number">0x00</span> <span class="hljs-number">0x9000000</span> <span class="hljs-number">0x00</span> <span class="hljs-number">0x1000</span>&gt;</span><span class="hljs-punctuation">;</span><br>    <span class="hljs-attr">compatible</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;arm,pl011\0arm,primecell&quot;</span><span class="hljs-punctuation">;</span><br><span class="hljs-punctuation">&#125;;</span><br><br><span class="hljs-title class_">chosen</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">stdout-path</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;/pl011@9000000&quot;</span><span class="hljs-punctuation">;</span><br>    <span class="hljs-attr">kaslr-seed</span> <span class="hljs-operator">=</span> <span class="hljs-params">&lt;<span class="hljs-number">0xcbd0568d</span> <span class="hljs-number">0xb463306c</span>&gt;</span><span class="hljs-punctuation">;</span><br><span class="hljs-punctuation">&#125;;</span><br></code></pre></td></tr></table></figure><p>由上可以看出，virt机器包含有pl011的设备，该设备的寄存器在<code>0x9000000</code>开始处。pl011实际上是一个UART设备，即串口。可以看到virt选择使用pl011作为标准输出，这是因为与PC不同，大部分嵌入式系统默认情况下并不包含VGA设备。</p><p>而<a href="https://developer.arm.com/documentation/ddi0183/g/programmers-model/summary-of-registers?lang=en">uart寄存器表</a>也列出了UART相关的寄存器如下图所示：</p><p><img src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/blogos-armv8/uart.png" alt="uart"></p><p>我们可以开始定义<code>pl011</code>驱动文件了。原则上来讲这部分内容应当定义在<code>src/uart_console.rs</code>中。但为了避免代码过长，我们选择重构<code>uart_console.rs</code>。</p><p>首先创建<code>src/uart_console</code>目录，并将原<code>uart_console.rs</code>更名为<code>mod.rs</code>，且置于<code>src/uart_console</code>目录下， 最后新建<code>src/uart_console/pl011.rs</code>文件。目录结构看起来像这样：</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">.<br>|<span class="hljs-string">____Cargo.toml</span><br><span class="hljs-string"></span>|<span class="hljs-string">____Cargo.lock</span><br><span class="hljs-string"></span>|<span class="hljs-string">____.cargo</span><br><span class="hljs-string"></span>|<span class="hljs-string"> </span>|<span class="hljs-string">____config.toml</span><br><span class="hljs-string"></span>|<span class="hljs-string">____aarch64-qemu.ld</span><br><span class="hljs-string"></span>|<span class="hljs-string">____.vscode</span><br><span class="hljs-string"></span>|<span class="hljs-string"> </span>|<span class="hljs-string">____launch.json</span><br><span class="hljs-string"></span>|<span class="hljs-string">____aarch64-unknown-none-softfloat.json</span><br><span class="hljs-string"></span>|____src<br>|<span class="hljs-string"> </span>|<span class="hljs-string">____panic.rs</span><br><span class="hljs-string"></span>|<span class="hljs-string"> </span>|<span class="hljs-string">____start.s</span><br><span class="hljs-string"></span>|<span class="hljs-string"> </span>|<span class="hljs-string">____interrupts.rs</span><br><span class="hljs-string"></span>|<span class="hljs-string"> </span>|<span class="hljs-string">____main.rs</span><br><span class="hljs-string"></span>|<span class="hljs-string"> </span>|____uart_console<br>|<span class="hljs-string"> </span>|<span class="hljs-string"> </span>|<span class="hljs-string">____mod.rs</span><br><span class="hljs-string"></span>|<span class="hljs-string"> </span>|<span class="hljs-string"> </span>|<span class="hljs-string">____pl011.rs</span><br><span class="hljs-string"></span>|<span class="hljs-string"> </span>|<span class="hljs-string">____exception.s</span><br></code></pre></td></tr></table></figure><p>我们先需要在<code>Cargo.toml</code>中的<code>[dependencies]</code>节中加入依赖（这里实验指导书有误）：</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs toml"><span class="hljs-section">[dependencies]</span><br><span class="hljs-attr">tock-registers</span> = <span class="hljs-string">&quot;0.7.0&quot;</span><br></code></pre></td></tr></table></figure><h4 id="驱动编写"><a href="#驱动编写" class="headerlink" title="驱动编写"></a>驱动编写</h4><p>根据上述<code>tock_registers</code>官方说明和寄存器表，我们修改<code>src/uart_console/pl011.rs</code>如下：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">use</span> tock_registers::&#123;registers::&#123;ReadOnly, ReadWrite, WriteOnly&#125;, register_bitfields, register_structs&#125;;<br><br><span class="hljs-keyword">pub</span> <span class="hljs-keyword">const</span> PL011REGS: *<span class="hljs-keyword">mut</span> PL011Regs = (<span class="hljs-number">0x0900_0000</span>) <span class="hljs-keyword">as</span> *<span class="hljs-keyword">mut</span> PL011Regs;<br><br>register_bitfields![<br>    <span class="hljs-type">u32</span>,<br><br>    <span class="hljs-keyword">pub</span> UARTDR [<br>        DATA <span class="hljs-title function_ invoke__">OFFSET</span>(<span class="hljs-number">0</span>) <span class="hljs-title function_ invoke__">NUMBITS</span>(<span class="hljs-number">8</span>) []<br>    ],<br>    <span class="hljs-comment">/// Flag Register</span><br>    <span class="hljs-keyword">pub</span> UARTFR [<br>        <span class="hljs-comment">/// Transmit FIFO full. The meaning of this bit depends on the</span><br>        <span class="hljs-comment">/// state of the FEN bit in the UARTLCR_ LCRH Register. If the</span><br>        <span class="hljs-comment">/// FIFO is disabled, this bit is set when the transmit</span><br>        <span class="hljs-comment">/// holding register is full. If the FIFO is enabled, the TXFF</span><br>        <span class="hljs-comment">/// bit is set when the transmit FIFO is full.</span><br>        TXFF <span class="hljs-title function_ invoke__">OFFSET</span>(<span class="hljs-number">6</span>) <span class="hljs-title function_ invoke__">NUMBITS</span>(<span class="hljs-number">1</span>) [],<br><br>        <span class="hljs-comment">/// Receive FIFO empty. The meaning of this bit depends on the</span><br>        <span class="hljs-comment">/// state of the FEN bit in the UARTLCR_H Register. If the</span><br>        <span class="hljs-comment">/// FIFO is disabled, this bit is set when the receive holding</span><br>        <span class="hljs-comment">/// register is empty. If the FIFO is enabled, the RXFE bit is</span><br>        <span class="hljs-comment">/// set when the receive FIFO is empty.</span><br>        RXFE <span class="hljs-title function_ invoke__">OFFSET</span>(<span class="hljs-number">4</span>) <span class="hljs-title function_ invoke__">NUMBITS</span>(<span class="hljs-number">1</span>) []<br>    ],<br><br>    <span class="hljs-comment">/// Integer Baud rate divisor</span><br>    <span class="hljs-keyword">pub</span> UARTIBRD [<br>        <span class="hljs-comment">/// Integer Baud rate divisor</span><br>        IBRD <span class="hljs-title function_ invoke__">OFFSET</span>(<span class="hljs-number">0</span>) <span class="hljs-title function_ invoke__">NUMBITS</span>(<span class="hljs-number">16</span>) []<br>    ],<br><br>    <span class="hljs-comment">/// Fractional Baud rate divisor</span><br>    <span class="hljs-keyword">pub</span> UARTFBRD [<br>        <span class="hljs-comment">/// Fractional Baud rate divisor</span><br>        FBRD <span class="hljs-title function_ invoke__">OFFSET</span>(<span class="hljs-number">0</span>) <span class="hljs-title function_ invoke__">NUMBITS</span>(<span class="hljs-number">6</span>) []<br>    ],<br><br>    <span class="hljs-comment">/// Line Control register</span><br>    <span class="hljs-keyword">pub</span> UARTLCR_H [<br>        <span class="hljs-comment">/// Parity enable. If this bit is set to 1, parity checking and generation</span><br>        <span class="hljs-comment">/// is enabled, else parity is disabled and no parity bit added to the data frame.</span><br>        PEN <span class="hljs-title function_ invoke__">OFFSET</span>(<span class="hljs-number">1</span>) <span class="hljs-title function_ invoke__">NUMBITS</span>(<span class="hljs-number">1</span>) [<br>            Disabled = <span class="hljs-number">0</span>,<br>            Enabled = <span class="hljs-number">1</span><br>        ],<br>        <span class="hljs-comment">/// Two stop bits select. If this bit is set to 1, two stop bits are transmitted</span><br>        <span class="hljs-comment">/// at the end of the frame.</span><br>        STP2 <span class="hljs-title function_ invoke__">OFFSET</span>(<span class="hljs-number">3</span>) <span class="hljs-title function_ invoke__">NUMBITS</span>(<span class="hljs-number">1</span>) [<br>            Stop1 = <span class="hljs-number">0</span>,<br>            Stop2 = <span class="hljs-number">1</span><br>        ],<br>        <span class="hljs-comment">/// Enable FIFOs.</span><br>        FEN <span class="hljs-title function_ invoke__">OFFSET</span>(<span class="hljs-number">4</span>) <span class="hljs-title function_ invoke__">NUMBITS</span>(<span class="hljs-number">1</span>) [<br>            Disabled = <span class="hljs-number">0</span>,<br>            Enabled = <span class="hljs-number">1</span><br>        ],<br><br>        <span class="hljs-comment">/// Word length. These bits indicate the number of data bits</span><br>        <span class="hljs-comment">/// transmitted or received in a frame.</span><br>        WLEN <span class="hljs-title function_ invoke__">OFFSET</span>(<span class="hljs-number">5</span>) <span class="hljs-title function_ invoke__">NUMBITS</span>(<span class="hljs-number">2</span>) [<br>            FiveBit = <span class="hljs-number">0b00</span>,<br>            SixBit = <span class="hljs-number">0b01</span>,<br>            SevenBit = <span class="hljs-number">0b10</span>,<br>            EightBit = <span class="hljs-number">0b11</span><br>        ]<br>    ],<br><br>    <span class="hljs-comment">/// Control Register</span><br>    <span class="hljs-keyword">pub</span> UARTCR [<br>        <span class="hljs-comment">/// Receive enable. If this bit is set to 1, the receive</span><br>        <span class="hljs-comment">/// section of the UART is enabled. Data reception occurs for</span><br>        <span class="hljs-comment">/// UART signals. When the UART is disabled in the middle of</span><br>        <span class="hljs-comment">/// reception, it completes the current character before</span><br>        <span class="hljs-comment">/// stopping.</span><br>        RXE    <span class="hljs-title function_ invoke__">OFFSET</span>(<span class="hljs-number">9</span>) <span class="hljs-title function_ invoke__">NUMBITS</span>(<span class="hljs-number">1</span>) [<br>            Disabled = <span class="hljs-number">0</span>,<br>            Enabled = <span class="hljs-number">1</span><br>        ],<br><br>        <span class="hljs-comment">/// Transmit enable. If this bit is set to 1, the transmit</span><br>        <span class="hljs-comment">/// section of the UART is enabled. Data transmission occurs</span><br>        <span class="hljs-comment">/// for UART signals. When the UART is disabled in the middle</span><br>        <span class="hljs-comment">/// of transmission, it completes the current character before</span><br>        <span class="hljs-comment">/// stopping.</span><br>        TXE    <span class="hljs-title function_ invoke__">OFFSET</span>(<span class="hljs-number">8</span>) <span class="hljs-title function_ invoke__">NUMBITS</span>(<span class="hljs-number">1</span>) [<br>            Disabled = <span class="hljs-number">0</span>,<br>            Enabled = <span class="hljs-number">1</span><br>        ],<br><br>        <span class="hljs-comment">/// UART enable</span><br>        UARTEN <span class="hljs-title function_ invoke__">OFFSET</span>(<span class="hljs-number">0</span>) <span class="hljs-title function_ invoke__">NUMBITS</span>(<span class="hljs-number">1</span>) [<br>            <span class="hljs-comment">/// If the UART is disabled in the middle of transmission</span><br>            <span class="hljs-comment">/// or reception, it completes the current character</span><br>            <span class="hljs-comment">/// before stopping.</span><br>            Disabled = <span class="hljs-number">0</span>,<br>            Enabled = <span class="hljs-number">1</span><br>        ]<br>    ],<br><br>    <span class="hljs-keyword">pub</span> UARTIMSC [<br>        RXIM <span class="hljs-title function_ invoke__">OFFSET</span>(<span class="hljs-number">4</span>) <span class="hljs-title function_ invoke__">NUMBITS</span>(<span class="hljs-number">1</span>) [<br>            Disabled = <span class="hljs-number">0</span>,<br>            Enabled = <span class="hljs-number">1</span><br>        ]<br>    ],<br>    <span class="hljs-comment">/// Interupt Clear Register</span><br>    <span class="hljs-keyword">pub</span> UARTICR [<br>        <span class="hljs-comment">/// Meta field for all pending interrupts</span><br>        ALL <span class="hljs-title function_ invoke__">OFFSET</span>(<span class="hljs-number">0</span>) <span class="hljs-title function_ invoke__">NUMBITS</span>(<span class="hljs-number">11</span>) [<br>            Clear = <span class="hljs-number">0x7ff</span><br>        ]<br>    ]<br>];<br></code></pre></td></tr></table></figure><p>这里对以上读写内容也不再细讲。只需要知道的是<code>pl011</code>的设备基址位于<code>0x0900_0000</code>(第二行代码），然后根据寄存器表定义我们需要的寄存器：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs rust">register_structs! &#123;<br>    <span class="hljs-keyword">pub</span> PL011Regs &#123;<br>        (<span class="hljs-number">0x00</span> =&gt; <span class="hljs-keyword">pub</span> dr: ReadWrite&lt;<span class="hljs-type">u32</span>, UARTDR::Register&gt;),                   <span class="hljs-comment">// 0x00</span><br>        (<span class="hljs-number">0x04</span> =&gt; __reserved_0),               <span class="hljs-comment">// 0x04</span><br>        (<span class="hljs-number">0x18</span> =&gt; <span class="hljs-keyword">pub</span> fr: ReadOnly&lt;<span class="hljs-type">u32</span>, UARTFR::Register&gt;),      <span class="hljs-comment">// 0x18</span><br>        (<span class="hljs-number">0x1c</span> =&gt; __reserved_1),               <span class="hljs-comment">// 0x1c</span><br>        (<span class="hljs-number">0x24</span> =&gt; <span class="hljs-keyword">pub</span> ibrd: WriteOnly&lt;<span class="hljs-type">u32</span>, UARTIBRD::Register&gt;), <span class="hljs-comment">// 0x24</span><br>        (<span class="hljs-number">0x28</span> =&gt; <span class="hljs-keyword">pub</span> fbrd: WriteOnly&lt;<span class="hljs-type">u32</span>, UARTFBRD::Register&gt;), <span class="hljs-comment">// 0x28</span><br>        (<span class="hljs-number">0x2C</span> =&gt; <span class="hljs-keyword">pub</span> lcr_h: WriteOnly&lt;<span class="hljs-type">u32</span>, UARTLCR_H::Register&gt;), <span class="hljs-comment">// 0x2C</span><br>        (<span class="hljs-number">0x30</span> =&gt; <span class="hljs-keyword">pub</span> cr: WriteOnly&lt;<span class="hljs-type">u32</span>, UARTCR::Register&gt;),     <span class="hljs-comment">// 0x30</span><br>        (<span class="hljs-number">0x34</span> =&gt; __reserved_2),               <span class="hljs-comment">// 0x34</span><br>        (<span class="hljs-number">0x38</span> =&gt; <span class="hljs-keyword">pub</span> imsc: ReadWrite&lt;<span class="hljs-type">u32</span>, UARTIMSC::Register&gt;), <span class="hljs-comment">// 0x38</span><br>        (<span class="hljs-number">0x44</span> =&gt; <span class="hljs-keyword">pub</span> icr: WriteOnly&lt;<span class="hljs-type">u32</span>, UARTICR::Register&gt;),   <span class="hljs-comment">// 0x44</span><br>        (<span class="hljs-number">0x48</span> =&gt; @END),<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这看起来好像比实验四中对应的寄存器描述部分要复杂，但如果你熟悉了之后，基本上可以依据技术参考手册中的寄存器描述无脑写了。（很多部分可以无脑抄）</p><p>然后我们在<code>src/uart_console/mod.rs</code>中引入<code>pl011.rs</code>，并修改<code>write_byte</code>。</p><p>我们在前面对输出是直接定义寄存器常量的</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">write_byte</span>(&amp;<span class="hljs-keyword">mut</span> <span class="hljs-keyword">self</span>, byte: <span class="hljs-type">u8</span>) &#123;<br>        <span class="hljs-keyword">const</span> UART0: *<span class="hljs-keyword">mut</span> <span class="hljs-type">u8</span> = <span class="hljs-number">0x0900_0000</span> <span class="hljs-keyword">as</span> *<span class="hljs-keyword">mut</span> <span class="hljs-type">u8</span>;<br>        <span class="hljs-keyword">unsafe</span> &#123;<br>            ptr::<span class="hljs-title function_ invoke__">write_volatile</span>(UART0, byte);<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>而现在我们已经定义好了<code>UART</code>的寄存器表，可以选择直接调用<code>pl011.rs</code>中定义的寄存器：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">use</span> tock_registers::&#123;interfaces::Writeable&#125;;<br><br><span class="hljs-keyword">pub</span> <span class="hljs-keyword">mod</span> pl011;<br><span class="hljs-keyword">use</span> pl011::*;<br><br><span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">write_byte</span>(&amp;<span class="hljs-keyword">mut</span> <span class="hljs-keyword">self</span>, byte: <span class="hljs-type">u8</span>) &#123;<br>    <span class="hljs-comment">// const UART0: *mut u8 = 0x0900_0000 as *mut u8;</span><br>    <span class="hljs-keyword">unsafe</span> &#123;<br>        <span class="hljs-comment">// pl011 device registers</span><br>        <span class="hljs-keyword">let</span> <span class="hljs-variable">pl011r</span>: &amp;PL011Regs = &amp;*PL011REGS;<br>        <span class="hljs-comment">// ptr::write_volatile(UART0, byte);</span><br>        pl011r.dr.<span class="hljs-title function_ invoke__">write</span>(UARTDR::DATA.<span class="hljs-title function_ invoke__">val</span>(byte <span class="hljs-keyword">as</span> <span class="hljs-type">u32</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>由于我们较为完整的定义好了<code>pl011</code>寄存器组，每次调用都需要一次初始化行为。故我们还需要为<code>Writer</code>结构实现构造函数，并修改<code>WRITER</code>宏的定义：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">//往串口寄存器写入字节和字符串进行输出</span><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">Writer</span> &#123;<br>    <span class="hljs-comment">// ...</span><br><br>    <span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">new</span>() <span class="hljs-punctuation">-&gt;</span> Writer&#123;<br><br>        <span class="hljs-keyword">unsafe</span> &#123;<br>            <span class="hljs-comment">// pl011 device registers</span><br>            <span class="hljs-keyword">let</span> <span class="hljs-variable">pl011r</span>: &amp;PL011Regs = &amp;*PL011REGS;<br><br>            <span class="hljs-comment">// 禁用pl011</span><br>            pl011r.cr.<span class="hljs-title function_ invoke__">write</span>(UARTCR::TXE::Disabled + UARTCR::RXE::Disabled + UARTCR::UARTEN::Disabled);<br>            <span class="hljs-comment">// 清空中断状态</span><br>            pl011r.icr.<span class="hljs-title function_ invoke__">write</span>(UARTICR::ALL::Clear);<br>            <span class="hljs-comment">// 设定中断mask，需要使能的中断</span><br>            pl011r.imsc.<span class="hljs-title function_ invoke__">write</span>(UARTIMSC::RXIM::Enabled);<br>            <span class="hljs-comment">// IBRD = UART_CLK / (16 * BAUD_RATE)</span><br>            <span class="hljs-comment">// FBRD = ROUND((64 * MOD(UART_CLK,(16 * BAUD_RATE))) / (16 * BAUD_RATE))</span><br>            <span class="hljs-comment">// UART_CLK = 24M</span><br>            <span class="hljs-comment">// BAUD_RATE = 115200</span><br>            pl011r.ibrd.<span class="hljs-title function_ invoke__">write</span>(UARTIBRD::IBRD.<span class="hljs-title function_ invoke__">val</span>(<span class="hljs-number">13</span>));<br>            pl011r.fbrd.<span class="hljs-title function_ invoke__">write</span>(UARTFBRD::FBRD.<span class="hljs-title function_ invoke__">val</span>(<span class="hljs-number">1</span>));<br>            <span class="hljs-comment">// 8N1 FIFO enable</span><br>            pl011r.lcr_h.<span class="hljs-title function_ invoke__">write</span>(UARTLCR_H::WLEN::EightBit + UARTLCR_H::PEN::Disabled + UARTLCR_H::STP2::Stop1<br>                + UARTLCR_H::FEN::Enabled);<br>            <span class="hljs-comment">// enable pl011</span><br>            pl011r.cr.<span class="hljs-title function_ invoke__">write</span>(UARTCR::UARTEN::Enabled + UARTCR::RXE::Enabled + UARTCR::TXE::Enabled);<br>        &#125;<br><br>        Writer<br>    &#125;<br>&#125;<br><br>lazy_static! &#123;<br>    <span class="hljs-keyword">pub</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">ref</span> WRITER: Mutex&lt;Writer&gt; = Mutex::<span class="hljs-title function_ invoke__">new</span>(Writer::<span class="hljs-title function_ invoke__">new</span>());<br>&#125;<br></code></pre></td></tr></table></figure><p>最后是将无用的<code>ptr</code>引用去除</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">- use core::&#123;fmt, ptr&#125;;</span><br><span class="hljs-addition">+ use core::fmt;</span><br></code></pre></td></tr></table></figure><p>至此，我们完成了所有关于pl011（uart）串口驱动的编写。</p><h3 id="串口输入中断处理回调"><a href="#串口输入中断处理回调" class="headerlink" title="串口输入中断处理回调"></a>串口输入中断处理回调</h3><p>第一节我们讲到了如何去实现timer中断的处理回调。而输入中断也是<code>el1_irq</code>一类的中断。回到我们修改&#x2F;新增的几个函数，我们将中断实际处理部分针对输入中断做一些判断和处理即可。</p><h4 id="输入中断初始化"><a href="#输入中断初始化" class="headerlink" title="输入中断初始化"></a>输入中断初始化</h4><p>同时钟中断一样，我们还是需要对输入中断进行启用和配置。修改<code>src/interrupts.rs</code>，新增如下内容：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 串口输入中断号33</span><br><span class="hljs-keyword">const</span> UART0_IRQ: <span class="hljs-type">u32</span> = <span class="hljs-number">33</span>;<br><br><span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">init_gicv2</span>() &#123;<br>    <span class="hljs-comment">// ...</span><br><br>    <span class="hljs-comment">// 初始化UART0 中断</span><br>    <span class="hljs-comment">// interrupts = &lt;0x00 0x01 0x04&gt;; SPI, 0x01, level</span><br>    <span class="hljs-title function_ invoke__">set_config</span>(UART0_IRQ, ICFGR_LEVEL); <span class="hljs-comment">//电平触发</span><br>    <span class="hljs-title function_ invoke__">set_priority</span>(UART0_IRQ, <span class="hljs-number">0</span>); <span class="hljs-comment">//优先级设定</span><br>    <span class="hljs-title function_ invoke__">clear</span>(UART0_IRQ); <span class="hljs-comment">//清除中断请求</span><br>    <span class="hljs-title function_ invoke__">enable</span>(UART0_IRQ); <span class="hljs-comment">//使能中断</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="输入中断处理回调"><a href="#输入中断处理回调" class="headerlink" title="输入中断处理回调"></a>输入中断处理回调</h4><p>然后对UART的数据接收中断进行处理：修改我们的中断实际处理函数<code>handle_irq_lines</code>为如下，并新增输入中断处理函数<code>handle_uart0_rx_irq</code>：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">handle_irq_lines</span>(ctx: &amp;<span class="hljs-keyword">mut</span> ExceptionCtx, _core_num: <span class="hljs-type">u32</span>, irq_num: <span class="hljs-type">u32</span>) &#123;<br>    <span class="hljs-keyword">if</span> irq_num == TIMER_IRQ &#123;<br>        <span class="hljs-title function_ invoke__">handle_timer_irq</span>(ctx);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> irq_num == UART0_IRQ &#123;<br>        <span class="hljs-title function_ invoke__">handle_uart0_rx_irq</span>(ctx);<br>    &#125; <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-title function_ invoke__">catch</span>(ctx, EL1_IRQ);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">use</span> tock_registers::interfaces::Readable;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">handle_uart0_rx_irq</span>(_ctx: &amp;<span class="hljs-keyword">mut</span> ExceptionCtx)&#123;<br>    <span class="hljs-keyword">use</span> crate::uart_console::pl011::*;<br>    <span class="hljs-keyword">unsafe</span>&#123;<br>        <span class="hljs-comment">// pl011 device registers</span><br>        <span class="hljs-keyword">let</span> <span class="hljs-variable">pl011r</span>: &amp;PL011Regs = &amp;*PL011REGS;<br><br>        <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">flag</span> = pl011r.fr.<span class="hljs-title function_ invoke__">read</span>(UARTFR::RXFE);<br>        <span class="hljs-keyword">while</span> flag != <span class="hljs-number">1</span> &#123;<br>            <span class="hljs-keyword">let</span> <span class="hljs-variable">value</span> = pl011r.dr.<span class="hljs-title function_ invoke__">read</span>(UARTDR::DATA);<br><br>            crate::<span class="hljs-built_in">print!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, value <span class="hljs-keyword">as</span> <span class="hljs-type">u8</span> <span class="hljs-keyword">as</span> <span class="hljs-type">char</span>);<br>            flag = pl011r.fr.<span class="hljs-title function_ invoke__">read</span>(UARTFR::RXFE);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>当我们输入一个字符后，uart产生一次输入中断，而输入中断处理函数则将我们输入的字符从寄存器中取出并调用<code>print!</code>宏打印出来。</p><p>由此我们完成了输入中断的处理。我们进行代码的构建并运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">cargo build<br>qemu-system-aarch64 -machine virt -m 1024M -cpu cortex-a53 -nographic -kernel target/aarch64-unknown-none-softfloat/debug/blogos_armv8<br></code></pre></td></tr></table></figure><p>当我们随意的在控制台中敲击字符，除去时钟中断的打点输出，我们将看到我们输入的字符。此时说明我们的输入中断是成功运作的。</p><p><img src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/blogos-armv8/uartOK.png" alt="输入中断完成"></p>]]></content>
    
    
    <categories>
      
      <category>BlogOS_for_armv8</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Course</tag>
      
      <tag>os</tag>
      
      <tag>rust</tag>
      
      <tag>blogos</tag>
      
      <tag>armv8</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>rust写个操作系统——课程实验blogos移至armV8深度解析：实验四 中断</title>
    <link href="/a4c75e16.html"/>
    <url>/a4c75e16.html</url>
    
    <content type="html"><![CDATA[<div class="note note-info">            <blockquote><p>你将在每个实验对应分支上都看到这句话，确保作者实验代码在被下载后，能在正确的环境中运行。</p></blockquote><p>运行环境请参考: <a href="https://noionion.top/adfdff.html">lab1 环境搭建</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">cargo build<br>qemu-system-aarch64 -machine virt -m 1024M -cpu cortex-a53 -nographic -kernel target/aarch64-unknown-none-softfloat/debug/blogos_armv8 -semihosting<br></code></pre></td></tr></table></figure>          </div><h2 id="实验四-中断"><a href="#实验四-中断" class="headerlink" title="实验四 中断"></a>实验四 中断</h2><p>中断、异常和陷阱指令是操作系统的基石，现代操作系统就是由中断驱动的。实验四的目的在于深刻理解中断的原理和机制，掌握CPU访问设备控制器的方法，掌握Arm体系结构的中断机制和规范，实现时钟中断服务和部分异常处理等。</p><p>中断是一种硬件机制。借助于中断，CPU可以不必再采用轮询这种低效的方式访问外部设备。将所有的外部设备与CPU直接相连是不现实的，外部设备的中断请求一般经由中断控制器，由中断控制器仲裁后再转发给CPU。Arm采用的中断控制器叫做<code>GIC</code>，即<code>general interrupt controller</code>。<code>gic</code>包括多个版本，如<code>GICv1</code>（已弃用），<code>GICv2</code>，<code>GICv3</code>，<code>GICv4</code>。简单起见，我们实验将选用<code>GICv2</code>版本。</p><p>为了配置好<code>gicv2</code>中断控制器，我们需要阅读其技术参考手册，以及上一个实验中讲到的设备树中关于<code>gic</code>的内存映射范围、中断基本说明，为<code>gic</code>编写内核驱动。</p><p>另外，为了检验我们中断的成功运行，我们在这节实验中也一并为<strong>linux高精度计时器</strong><code>timer</code>编写应用。<code>timer</code>的精确计时依赖着系统的时钟中断，可以作为中断发生的检验方式。</p><hr><h3 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h3><p>实验指导书是这么写的：</p><blockquote><p>本实验的目的在于深刻理解中断的原理和机制，掌握CPU访问设备控制器的方法，掌握Arm体系结构的中断机制和规范，实现时钟中断服务和部分异常处理等。</p></blockquote><p>但实际上，异常处理是在实验五才进行处理的，这个实验指编写了异常发生时的回调函数规范。因此实验目的如下：</p><ol><li><p>理解中断原理和机制</p></li><li><p>掌握CPU访问设备控制器（这里是<code>GIC</code>）的方法，即为设备编写驱动和初始化等基本方法</p></li><li><p>掌握Arm体系结构的中断机制和规范，即定义异常向量表</p></li><li><p>掌握异常回调函数的写法</p></li><li><p>了解<code>timer</code>计时器原理，实现时间中断服务。</p></li></ol><hr><h3 id="中断原理"><a href="#中断原理" class="headerlink" title="中断原理"></a>中断原理</h3><h4 id="中断是什么"><a href="#中断是什么" class="headerlink" title="中断是什么"></a>中断是什么</h4><p>中断是一种硬件机制。简单的说，在cpu执行程序的过程中，突然发生异常 （包括复位、指令错误等等异常，中断只是异常其中一种），可以打断当前正在执行的程序，临时先处理比较紧急的事情，当处理完成了，再回到原来的程序继续执行。</p><p>借助于中断，CPU可以不必再采用轮询这种低效的方式访问外部设备。将所有的外部设备与CPU直接相连是不现实的，外部设备的中断请求一般经由中断控制器，由中断控制器仲裁后再转发给CPU。如下图所示Arm的中断系统。</p><p><img src="https://os2022exps-doc.readthedocs.io/zh_CN/latest/_images/ARMGIC.png"></p><p>其中nIRQ是普通中断，nFIQ是快速中断。 Arm采用的中断控制器叫做GIC，即general interrupt controller。</p><h4 id="中断如何发生"><a href="#中断如何发生" class="headerlink" title="中断如何发生"></a>中断如何发生</h4><p>首先，在一个cpu中 中断源有很多（比如gpio中断、定时器中断等等），那么为了管理这些中断，就需要一个中断控制器。<br>当发生中断时，相应的中断源会给中断控制器发出信号，中断控制器再给cpu发信号，最后cpu处理中断。</p><h4 id="中断的大概流程"><a href="#中断的大概流程" class="headerlink" title="中断的大概流程"></a>中断的大概流程</h4><ol><li><p>初始化：</p><ul><li><p>使能中断源（允许发生中断）</p></li><li><p>中断控制器可以选择屏蔽或不屏蔽中断，设置中断优先级等</p></li><li><p>cpu 使能中断总开关</p></li></ul></li><li><p>中断跳转：</p><ul><li><p>cpu 每执行完一条指令就会查看有无异常发生</p></li><li><p>发生异常，cpu 分辩中断源</p></li><li><p>cpu 被强制跳转到中断向量表（汇编）中的跳转地址</p></li><li><p>跳转到相应的中断服务函数</p></li></ul></li><li><p>中断处理回调函数：</p><ul><li><p>保护现场，保证当前执行的程序能完好返回（存储指令寄存器，以及存数据的寄存器等等各种寄存器，会采用压栈的方式）</p></li><li><p>获取中断id（a7 架构，其中可能还需要切换处理器模式等等），根据id跳转到对应的中断处理函数。</p></li><li><p>中断处理函数可以是我们自己编写的，代表的是中断发生后要处理的事情</p></li><li><p>处理完成，返回中断服务函数。</p></li><li><p>还原现场（将各个寄存器的值还回，指令寄存器需要-4后再返回，这里涉及到arm处理器的3级指令流水线，不做细讲）</p></li></ul></li></ol><h3 id="GIC内核驱动编写及调用"><a href="#GIC内核驱动编写及调用" class="headerlink" title="GIC内核驱动编写及调用"></a>GIC内核驱动编写及调用</h3><p>在实现我们的中断控制器驱动前，首先还是要先了解GIC。由于实验中只需要实现GICv2，故在此只对GICv2进行介绍。</p><h4 id="中断控制器GICv2"><a href="#中断控制器GICv2" class="headerlink" title="中断控制器GICv2"></a>中断控制器GICv2</h4><p>GIC 是联系外设中断和 CPU 的桥梁，也是各 CPU 之间中断互联的通道（也带有管理功能），它负责检测、管理、分发中断，可以做到：</p><p>1、使能或禁止中断；</p><p>2、把中断分组到Group0还是Group1（Group0作为安全模式使用连接FIQ ，Group1 作为非安全模式使用，连接IRQ ）；</p><p>3、多核系统中将中断分配到不同处理器上；</p><p>4、设置电平触发还是边沿触发方式（不等于外设的触发方式）；</p><p>5、虚拟化扩展。</p><p>  ARM CPU 对外的连接只有2 个中断： IRQ和FIQ ，相对应的处理模式分别是一般中断（IRQ ）处理模式和快速中断（FIQ ）处理模式。所以GIC 最后要把中断汇集成2 条线，与CPU 对接。</p><p>而在我们的实验中无需实现这么多功能。qemu模拟的virt机器作为单核系统，是不需要作过多的考虑的。而虚拟化扩展更非我们需要考虑实现的功能。</p><p>在gicv2中，gic由两个大模块<code>distributor</code>和<code>interface</code>组成：</p><ol><li><p>distributor：主要负责中断源的管理、优先级、中断使能、中断屏蔽等，如下：</p><ul><li><p>中断分发，对于PPI,SGI是各个core独有的中断，不参与目的core的仲裁，SPI，是所有core共享的，根据配置决定中断发往的core。</p></li><li><p>中断优先级的处理，将最高优先级中断发送给cpu interface。</p></li></ul><p> <strong>寄存器使用 GICD_ 作为前缀。一个gic中，只有一个GICD。</strong>  </p></li><li><p>cpu interface：要用于连接处理器，与处理器进行交互。将GICD发送的中断信息，通过IRQ,FIQ管脚，传输给core。</p><p> <strong>寄存器使用 GICC_ 作为前缀。每一个core，有一个cpu interface。</strong></p></li><li><p>另外还有专门服务于虚拟中断的<code>virtual cpu interface</code>，这里并不考虑。</p></li></ol><h5 id="gic中断分发器-Distributor"><a href="#gic中断分发器-Distributor" class="headerlink" title="gic中断分发器(Distributor)"></a>gic中断分发器(Distributor)</h5><p>  分发器的主要的作用是检测各个中断源的状态，控制各个中断源的行为，分发各个中断源产生的中断事件到指定的一个或者多个CPU接口上。虽然分发器可以管理多个中断源，但是它总是把优先级最高的那个中断请求送往CPU接口。分发器对中断的控制包括：</p><ul><li><p>打开或关闭每个中断。Distributor对中断的控制分成两个级别。一个是全局中断的控制<code>（GIC_DIST_CTRL）</code>。一旦关闭了全局的中断，那么任何的中断源产生的中断事件都不会被传递到 CPU interface。另外一个级别是对针对各个中断源进行控制<code>（GIC_DIST_ENABLE_CLEAR）</code>，关闭某一个中断源会导致该中断事件不会分发到 CPU interface，但不影响其他中断源产生中断事件的分发。</p></li><li><p>控制将当前优先级最高的中断事件分发到一个或者一组 <code>CPU interface</code>。当一个中断事件分发到多个 <code>CPU interface</code> 的时候，GIC 的内部逻辑应该保证只 <code>assert</code> 一个CPU。</p></li><li><p>优先级控制。</p></li><li><p><code>interrupt</code>属性设定。设置每个外设中断的触发方式：电平触发、边缘触发。</p></li><li><p><code>interrupt group</code>的设定。设置每个中断的 Group，其中 Group0 用于安全中断，支持 FIQ 和 IRQ，Group1 用于非安全中断，只支持 IRQ。</p></li><li><p>将SGI中断分发到目标CPU上。</p></li><li><p>每个中断的状态可见。</p></li><li><p>提供软件机制来设置和清除外设中断的pending状态。</p></li></ul><h5 id="gic中断接口-cpu-interface"><a href="#gic中断接口-cpu-interface" class="headerlink" title="gic中断接口(cpu interface)"></a>gic中断接口(cpu interface)</h5><p>CPU接口主要用于和CPU进行接口。主要功能包括：</p><ul><li><p>打开或关闭 <code>CPU interface</code> 向连接的 <code>CPU assert</code> 中断事件。对于 ARM，CPU interface 和 CPU 之间的中断信号线是 nIRQCPU 和 nFIQCPU。如果关闭了中断，即便是 Distributor 分发了一个中断事件到 CPU interface，也不会 assert 指定的 nIRQ 或者 nFIQ 通知 Core。</p></li><li><p>中断的确认。Core 会向 <code>CPU interface</code> 应答中断（应答当前优先级最高的那个中断），中断一旦被应答，<code>Distributor</code> 就会把该中断的状态从 <code>pending</code> 修改成 <code>active</code> 或者 <code>pending and active</code>（这是和该中断源的信号有关，例如如果是电平中断并且保持了该 <code>asserted</code> 电平，那么就是 <code>pending and active</code>）。ack 了中断之后，CPU interface 就会 deassert <code>nIRQCPU</code> 和 <code>nFIQCPU</code> 信号线。</p></li><li><p>中断处理完毕的通知。当 <code>interrupt handler</code> 处理完了一个中断的时候，会向写 <code>CPU interface</code> 的寄存器通知 GIC CPU 已经处理完该中断。做这个动作一方面是通知 <code>Distributor</code> 将中断状态修改为 <code>deactive</code>，另外一方面，CPU interface 会 priority drop，从而允许其他的 pending 的中断向 CPU 提交。</p></li><li><p>为 CPU 设置中断优先级掩码。通过 <code>priority mask</code>，可以屏蔽掉一些优先级比较低的中断，这些中断不会通知到 CPU。</p></li><li><p>设置 CPU 的中断抢占（preemption）策略。</p></li><li><p>在多个中断事件同时到来的时候，选择一个优先级最高的通知 CPU。</p></li></ul><p>关于<code>gicv2</code>就先介绍这么多。接下来我们开始一边实现我们需要实现的部分，一边继续介绍gicv2的细节。</p><h4 id="gicv2内核驱动"><a href="#gicv2内核驱动" class="headerlink" title="gicv2内核驱动"></a>gicv2内核驱动</h4><h5 id="寄存器定义"><a href="#寄存器定义" class="headerlink" title="寄存器定义"></a>寄存器定义</h5><p>编写驱动首先需要对寄存器以一些常量化的方式表示，以便我们更好的调用。阅读设备树中关于gicv2部分的代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs vts">intc@8000000 &#123;<br>        phandle = &lt;0x8001&gt;;<br>        reg = &lt;0x00 0x8000000 0x00 0x10000 0x00 0x8010000 0x00 0x10000&gt;;<br>        compatible = &quot;arm,cortex-a15-gic&quot;;<br>        ranges;<br>        #size-cells = &lt;0x02&gt;;<br>        #address-cells = &lt;0x02&gt;;<br>        interrupt-controller;<br>        #interrupt-cells = &lt;0x03&gt;;<br><br>        v2m@8020000 &#123;<br>                phandle = &lt;0x8002&gt;;<br>                reg = &lt;0x00 0x8020000 0x00 0x1000&gt;;<br>                msi-controller;<br>                compatible = &quot;arm,gic-v2m-frame&quot;;<br>        &#125;;<br>&#125;;<br></code></pre></td></tr></table></figure><p>其中<code>reg</code>一行约定了gic的寄存器在内存中的映射范围，并结合gicv2的文档<a href="https://www.kernel.org/doc/Documentation/devicetree/bindings/interrupt-controller/arm%2Cgic.txt">ARM Generic Interrupt Controller</a>可知：</p><ul><li><p>GICD寄存器说明中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vts">reg = &lt;0x00 0x8000000 0x00 0x10000 0x00 0x8010000 0x00 0x10000&gt;;<br></code></pre></td></tr></table></figure><p>约定：GICD寄存器映射到内存的位置为0x8000000，长度为0x10000， GICC寄存器映射到内存的位置为0x8010000，长度为0x10000</p></li><li><p>GICD中断说明中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vts">#interrupt-cells = &lt;0x03&gt;;<br></code></pre></td></tr></table></figure><p>结合文档可知：约定：第一个cell为中断类型，0表示SPI，1表示PPI；第二个cell为中断号，SPI范围为<code>[0-987]</code>，PPI为<code>[0-15]</code>；第三个cell为flags，其中<code>[3:0]</code>位表示触发类型，<code>4</code>表示高电平触发，<code>[15:8]</code>为PPI的cpu中断掩码，每1位对应一个cpu，为1表示该中断会连接到对应的cpu。</p></li></ul><p>由此我们知道了gicv2的寄存器基址及其范围。阅读文档<a href="https://documentation-service.arm.com/static/5f8ff196f86e16515cdbf969?token=">ARM Generic Interrupt Controller Architecture version 2.0 - Architecture Specification</a>，可知寄存器的相对基址的映射地址及其功能。</p><p>其中寄存器表如下：</p><ul><li><p>GICD部分寄存器（文档P75）：</p><p>  <img src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/blogos-armv8/gicd.png" alt="GICD寄存器说明"></p><p>  新建<code>src/interrupts.rs</code>文件，定义寄存器表如下：</p>  <figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">//GICD寄存器基址</span><br><span class="hljs-keyword">const</span> GICD_BASE: <span class="hljs-type">u64</span> = <span class="hljs-number">0x08000000</span>;<br><br><span class="hljs-comment">//GICD实验所需寄存器</span><br><span class="hljs-keyword">const</span> GICD_CTLR: *<span class="hljs-keyword">mut</span> <span class="hljs-type">u32</span> = (GICD_BASE + <span class="hljs-number">0x0</span>) <span class="hljs-keyword">as</span> *<span class="hljs-keyword">mut</span> <span class="hljs-type">u32</span>;<br><span class="hljs-keyword">const</span> GICD_ISENABLER: *<span class="hljs-keyword">mut</span> <span class="hljs-type">u32</span> = (GICD_BASE + <span class="hljs-number">0x0100</span>) <span class="hljs-keyword">as</span> *<span class="hljs-keyword">mut</span> <span class="hljs-type">u32</span>;<br><span class="hljs-comment">// const GICD_ICENABLER: *mut u32 = (GICD_BASE + 0x0180) as *mut u32;（此寄存器用于中断disable，此实验并未使用该函数，故注释</span><br><span class="hljs-keyword">const</span> GICD_ICPENDR: *<span class="hljs-keyword">mut</span> <span class="hljs-type">u32</span> = (GICD_BASE + <span class="hljs-number">0x0280</span>) <span class="hljs-keyword">as</span> *<span class="hljs-keyword">mut</span> <span class="hljs-type">u32</span>;<br><span class="hljs-keyword">const</span> GICD_IPRIORITYR: *<span class="hljs-keyword">mut</span> <span class="hljs-type">u32</span> = (GICD_BASE + <span class="hljs-number">0x0400</span>) <span class="hljs-keyword">as</span> *<span class="hljs-keyword">mut</span> <span class="hljs-type">u32</span>;<br><span class="hljs-keyword">const</span> GICD_ICFGR: *<span class="hljs-keyword">mut</span> <span class="hljs-type">u32</span> = (GICD_BASE + <span class="hljs-number">0x0c00</span>) <span class="hljs-keyword">as</span> *<span class="hljs-keyword">mut</span> <span class="hljs-type">u32</span>;<br><br><span class="hljs-comment">//GICD常量值</span><br><span class="hljs-keyword">const</span> GICD_CTLR_ENABLE: <span class="hljs-type">u32</span> = <span class="hljs-number">1</span>; <span class="hljs-comment">// Enable GICD</span><br><span class="hljs-keyword">const</span> GICD_CTLR_DISABLE: <span class="hljs-type">u32</span> = <span class="hljs-number">0</span>; <span class="hljs-comment">// Disable GICD</span><br><span class="hljs-keyword">const</span> GICD_ISENABLER_SIZE: <span class="hljs-type">u32</span> = <span class="hljs-number">32</span>;<br><span class="hljs-comment">// const GICD_ICENABLER_SIZE: u32 = 32; 注释理由同上</span><br><span class="hljs-keyword">const</span> GICD_ICPENDR_SIZE: <span class="hljs-type">u32</span> = <span class="hljs-number">32</span>;<br><span class="hljs-keyword">const</span> GICD_IPRIORITY_SIZE: <span class="hljs-type">u32</span> = <span class="hljs-number">4</span>;<br><span class="hljs-keyword">const</span> GICD_IPRIORITY_BITS: <span class="hljs-type">u32</span> = <span class="hljs-number">8</span>;<br><span class="hljs-keyword">const</span> GICD_ICFGR_SIZE: <span class="hljs-type">u32</span> = <span class="hljs-number">16</span>;<br><span class="hljs-keyword">const</span> GICD_ICFGR_BITS: <span class="hljs-type">u32</span> = <span class="hljs-number">2</span>;<br></code></pre></td></tr></table></figure></li><li><p>GICC部分寄存器（文档P76)</p><p>  <img src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/blogos-armv8/gicc.png" alt="GICC寄存器"></p><p>  继续编辑<code>src/interrupts.rs</code>文件，定义寄存器表如下：</p>  <figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">//GICC寄存器基址</span><br><span class="hljs-keyword">const</span> GICD_BASE: <span class="hljs-type">u64</span> = <span class="hljs-number">0x08010000</span>;<br><br><span class="hljs-comment">//GICC实验所需寄存器</span><br><span class="hljs-keyword">const</span> GICC_CTLR: *<span class="hljs-keyword">mut</span> <span class="hljs-type">u32</span> = (GICC_BASE + <span class="hljs-number">0x0</span>) <span class="hljs-keyword">as</span> *<span class="hljs-keyword">mut</span> <span class="hljs-type">u32</span>;<br><span class="hljs-keyword">const</span> GICC_PMR: *<span class="hljs-keyword">mut</span> <span class="hljs-type">u32</span> = (GICC_BASE + <span class="hljs-number">0x0004</span>) <span class="hljs-keyword">as</span> *<span class="hljs-keyword">mut</span> <span class="hljs-type">u32</span>;<br><span class="hljs-keyword">const</span> GICC_BPR: *<span class="hljs-keyword">mut</span> <span class="hljs-type">u32</span> = (GICC_BASE + <span class="hljs-number">0x0008</span>) <span class="hljs-keyword">as</span> *<span class="hljs-keyword">mut</span> <span class="hljs-type">u32</span>;<br><br><span class="hljs-comment">//GICC常量值</span><br><span class="hljs-keyword">const</span> GICC_CTLR_ENABLE: <span class="hljs-type">u32</span> = <span class="hljs-number">1</span>;  <span class="hljs-comment">// Enable GICC</span><br><span class="hljs-keyword">const</span> GICC_CTLR_DISABLE: <span class="hljs-type">u32</span> = <span class="hljs-number">0</span>; <span class="hljs-comment">// Disable GICC</span><br><span class="hljs-keyword">const</span> GICC_PMR_PRIO_LOW: <span class="hljs-type">u32</span> = <span class="hljs-number">0xff</span>; <span class="hljs-comment">// 优先级掩码寄存器，中断优先级过滤器，较高优先级对应较低优先级字段值。</span><br><span class="hljs-keyword">const</span> GICC_BPR_NO_GROUP: <span class="hljs-type">u32</span> = <span class="hljs-number">0x00</span>; <span class="hljs-comment">// 优先级分组是将GICC_BPR（Binary PointRegister）分为两个域，组优先级（group priority）和组内优先级（subpriority）。当决定抢占（Preemption）的时候，组优先级相同的中断被视为一样的，不考虑组内优先级。那就意味着在每个优先级组内只能有一个中断被激活。组优先级又被称为抢占级别（preemption level）。这里令其无组优先级。</span><br></code></pre></td></tr></table></figure></li></ul><h5 id="GIC初始化"><a href="#GIC初始化" class="headerlink" title="GIC初始化"></a>GIC初始化</h5><p>阅读文档(P77)的4.1.5节，可以看到如何对GIC的初始化启用。在这我们以一个对于rust而言不安全的方式（直接写入寄存器）来实现</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">use</span> core::ptr;<br><br><span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">init_gicv2</span>() &#123;<br>    <span class="hljs-comment">// 初始化Gicv2的distributor和cpu interface</span><br>    <span class="hljs-comment">// 禁用distributor和cpu interface后进行相应配置</span><br>    <span class="hljs-keyword">unsafe</span> &#123;<br>        ptr::<span class="hljs-title function_ invoke__">write_volatile</span>(GICD_CTLR, GICD_CTLR_DISABLE);<br>        ptr::<span class="hljs-title function_ invoke__">write_volatile</span>(GICC_CTLR, GICC_CTLR_DISABLE);<br>        ptr::<span class="hljs-title function_ invoke__">write_volatile</span>(GICC_PMR, GICC_PMR_PRIO_LOW);<br>        ptr::<span class="hljs-title function_ invoke__">write_volatile</span>(GICC_BPR, GICC_BPR_NO_GROUP);<br>    &#125;<br><br>    <span class="hljs-comment">// 启用distributor和cpu interface</span><br>    <span class="hljs-keyword">unsafe</span> &#123;<br>        ptr::<span class="hljs-title function_ invoke__">write_volatile</span>(GICD_CTLR, GICD_CTLR_ENABLE);<br>        ptr::<span class="hljs-title function_ invoke__">write_volatile</span>(GICC_CTLR, GICC_CTLR_ENABLE);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>先禁用gicv2再进行初始化配置，是为了避免上一次的关机未对gicv2禁用后对初始化造成的影响。当对寄存器做好配置后我们再启用它。</p><p>对<code>GICC_PMR</code>优先级掩码寄存器配置初始值<code>0xff</code>。通过该寄存器中的值，可以屏蔽低优先级中断，这样它们就永远不会被触发，我们设置<code>0xff</code>，由于值<code>0xff</code>对应于最低优先级，<code>0x00</code>对应于最高优先级，故为接受所有中断。而对<code>GICC_BPR</code>设置为0,则最高优先级的挂起中断将被传递给处理器，而不考虑组优先级。</p><h5 id="GIC相关函数"><a href="#GIC相关函数" class="headerlink" title="GIC相关函数"></a>GIC相关函数</h5><p>对于某个中断号，我们本身需要有多种函数对其作相应的处理。继续向代码中添加如下内容：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 使能中断号为interrupt的中断</span><br><span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">enable</span>(interrupt: <span class="hljs-type">u32</span>) &#123;<br>    <span class="hljs-keyword">unsafe</span> &#123;<br>        ptr::<span class="hljs-title function_ invoke__">write_volatile</span>(<br>            GICD_ISENABLER.<span class="hljs-title function_ invoke__">add</span>((interrupt / GICD_ISENABLER_SIZE) <span class="hljs-keyword">as</span> <span class="hljs-type">usize</span>),<br>            <span class="hljs-number">1</span> &lt;&lt; (interrupt % GICD_ISENABLER_SIZE)<br>        );<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 禁用中断号为interrupt的中断</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">pub fn disable(interrupt: u32) &#123;</span><br><span class="hljs-comment">    unsafe &#123;</span><br><span class="hljs-comment">        ptr::write_volatile(</span><br><span class="hljs-comment">            GICD_ICENABLER.add((interrupt / GICD_ICENABLER_SIZE) as usize),</span><br><span class="hljs-comment">            1 &lt;&lt; (interrupt % GICD_ICENABLER_SIZE)</span><br><span class="hljs-comment">        );</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">&#125;*/</span><br><br><span class="hljs-comment">// 清除中断号为interrupt的中断</span><br><span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">clear</span>(interrupt: <span class="hljs-type">u32</span>) &#123;<br>    <span class="hljs-keyword">unsafe</span> &#123;<br>        ptr::<span class="hljs-title function_ invoke__">write_volatile</span>(<br>            GICD_ICPENDR.<span class="hljs-title function_ invoke__">add</span>((interrupt / GICD_ICPENDR_SIZE) <span class="hljs-keyword">as</span> <span class="hljs-type">usize</span>),<br>            <span class="hljs-number">1</span> &lt;&lt; (interrupt % GICD_ICPENDR_SIZE)<br>        );<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 设置中断号为interrupt的中断的优先级为priority</span><br><span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">set_priority</span>(interrupt: <span class="hljs-type">u32</span>, priority: <span class="hljs-type">u32</span>) &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">shift</span> = (interrupt % GICD_IPRIORITY_SIZE) * GICD_IPRIORITY_BITS;<br>    <span class="hljs-keyword">unsafe</span> &#123;<br>        <span class="hljs-keyword">let</span> <span class="hljs-variable">addr</span>: *<span class="hljs-keyword">mut</span> <span class="hljs-type">u32</span> = GICD_IPRIORITYR.<span class="hljs-title function_ invoke__">add</span>((interrupt / GICD_IPRIORITY_SIZE) <span class="hljs-keyword">as</span> <span class="hljs-type">usize</span>);<br>        <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">value</span>: <span class="hljs-type">u32</span> = ptr::<span class="hljs-title function_ invoke__">read_volatile</span>(addr);<br>        value &amp;= !(<span class="hljs-number">0xff</span> &lt;&lt; shift);<br>        value |= priority &lt;&lt; shift;<br>        ptr::<span class="hljs-title function_ invoke__">write_volatile</span>(addr, value);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 设置中断号为interrupt的中断的属性为config</span><br><span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">set_config</span>(interrupt: <span class="hljs-type">u32</span>, config: <span class="hljs-type">u32</span>) &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">shift</span> = (interrupt % GICD_ICFGR_SIZE) * GICD_ICFGR_BITS;<br>    <span class="hljs-keyword">unsafe</span> &#123;<br>        <span class="hljs-keyword">let</span> <span class="hljs-variable">addr</span>: *<span class="hljs-keyword">mut</span> <span class="hljs-type">u32</span> = GICD_ICFGR.<span class="hljs-title function_ invoke__">add</span>((interrupt / GICD_ICFGR_SIZE) <span class="hljs-keyword">as</span> <span class="hljs-type">usize</span>);<br>        <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">value</span>: <span class="hljs-type">u32</span> = ptr::<span class="hljs-title function_ invoke__">read_volatile</span>(addr);<br>        value &amp;= !(<span class="hljs-number">0x03</span> &lt;&lt; shift);<br>        value |= config &lt;&lt; shift;<br>        ptr::<span class="hljs-title function_ invoke__">write_volatile</span>(addr, value);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>由于<code>disable</code>函数在本实验从未使用过，未避免rust安全性报错&#x2F;警告，这里选择注释。<code>enable</code>函数则参照文档P93中<code>4.3.5</code>节编写，<code>disable</code>函数参照<code>4.3.6</code>节，<code>clear</code>函数参照<code>4.3.8</code>节，<code>set_priority</code>函数参照<code>4.3.11</code>节，<code>set_config</code>函数参照<code>4.3.13</code>节。具体不在这里说明。</p><p>自此，我们已经基本完成了一个简略版的gicv2内核驱动，基本上可以满足实验的需求。</p><h3 id="ArmV8中断机制及异常回调"><a href="#ArmV8中断机制及异常回调" class="headerlink" title="ArmV8中断机制及异常回调"></a>ArmV8中断机制及异常回调</h3><p>ARMv8 架构定义了两种执行状态(Execution States)，AArch64 和 AArch32。分别对应使用64位宽通用寄存器或32位宽通用寄存器的执行。</p><p><img src="https://os2022exps-doc.readthedocs.io/zh_CN/latest/_images/aarch64_exception_levels_2.svg"></p><p>上图所示为AArch64中的异常级别(Exception levels)的组织。可见AArch64中共有4个异常级别，分别为EL0，EL1，EL2和EL3。在AArch64中，Interrupt是Exception的子类型，称为异常。 AArch64 中有四种类型的异常:</p><ul><li><p>Sync（Synchronous exceptions，同步异常），在执行时触发的异常，例如在尝试访问不存在的内存地址时。</p></li><li><p>IRQ （Interrupt requests，中断请求），由外部设备产生的中断</p></li><li><p>FIQ （Fast Interrupt Requests，快速中断请求），类似于IRQ，但具有更高的优先级，因此 FIQ 中断服务程序不能被其他 IRQ 或 FIQ 中断。</p></li><li><p>SError （System Error，系统错误），用于外部数据中止的异步中断。</p></li></ul><p>当异常发生时，处理器将执行与该异常对应的异常处理代码。在ARM架构中，这些异常处理代码将会被保存在内存的异常向量表中。每一个异常级别（EL0，EL1，EL2和EL3）都有其对应的异常向量表。需要注意的是，与x86等架构不同，该表包含的是要执行的指令，而不是函数地址 3 。</p><p>异常向量表的基地址由VBAR_ELn给出，然后每个表项都有一个从该基地址定义的偏移量。 每个表有16个表项，每个表项的大小为128（0x80）字节（32 条指令）。 该表实际上由4组，每组4个表项组成。 分别是：</p><ul><li><p>发生于当前异常级别的异常且SPSel寄存器选择SP0 4 ， Sync、IRQ、FIQ、SError对应的4个异常处理。</p></li><li><p>发生于当前异常级别的异常且SPSel寄存器选择SPx 4 ， Sync、IRQ、FIQ、SError对应的4个异常处理。</p></li><li><p>发生于较低异常级别的异常且执行状态为AArch64， Sync、IRQ、FIQ、SError对应的4个异常处理。</p></li><li><p>发生于较低异常级别的异常且执行状态为AArch32， Sync、IRQ、FIQ、SError对应的4个异常处理。</p></li></ul><h4 id="异常向量表"><a href="#异常向量表" class="headerlink" title="异常向量表"></a>异常向量表</h4><p>阅读<a href="https://developer.arm.com/documentation/100933/0100/AArch64-exception-vector-table">AArch64 Exception and Interrupt Handling</a>可得知以下异常向量表的地址定义：</p><p><img src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/blogos-armv8/exceAddr.png"></p><p>故我们新建<code>src/exceptions.s</code>，并定义异常向量表如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.section .text.exceptions_vector_table<br>// Export a symbol for the Rust code to use.<br>.globl exception_vector_table<br>exception_vector_table:<br><br>.org 0x0000<br>    EXCEPTION_VECTOR el1_sp0_sync<br><br>.org 0x0080<br>    EXCEPTION_VECTOR el1_sp0_irq<br><br>.org 0x0100<br>    EXCEPTION_VECTOR el1_sp0_fiq<br><br>.org 0x0180<br>    EXCEPTION_VECTOR el1_sp0_error<br><br>.org 0x0200<br>    EXCEPTION_VECTOR el1_sync<br><br>.org 0x0280<br>    EXCEPTION_VECTOR el1_irq<br><br>.org 0x0300<br>    EXCEPTION_VECTOR el1_fiq<br><br>.org 0x0380<br>    EXCEPTION_VECTOR el1_error<br><br>.org 0x0400<br>    EXCEPTION_VECTOR el0_sync<br><br>.org 0x0480<br>    EXCEPTION_VECTOR el0_irq<br><br>.org 0x0500<br>    EXCEPTION_VECTOR el0_fiq<br><br>.org 0x0580<br>    EXCEPTION_VECTOR el0_error<br><br>.org 0x0600<br>    EXCEPTION_VECTOR el0_32_sync<br><br>.org 0x0680<br>    EXCEPTION_VECTOR el0_32_irq<br><br>.org 0x0700<br>    EXCEPTION_VECTOR el0_32_fiq<br><br>.org 0x0780<br>    EXCEPTION_VECTOR el0_32_error<br><br>.org 0x0800<br></code></pre></td></tr></table></figure><p>并定义异常向量表使用的<code>EXCEPTION_VECTOR</code>宏和宏中用的<code>.exit_exception</code>函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.equ CONTEXT_SIZE, 264<br><br>.section .text.exceptions<br><br>.macro EXCEPTION_VECTOR handler<br><br>  sub sp, sp, #CONTEXT_SIZE<br><br>  // store general purpose registers<br>  stp x0, x1, [sp, #16 * 0]<br>  stp x2, x3, [sp, #16 * 1]<br>  stp x4, x5, [sp, #16 * 2]<br>  stp x6, x7, [sp, #16 * 3]<br>  stp x8, x9, [sp, #16 * 4]<br>  stp x10, x11, [sp, #16 * 5]<br>  stp x12, x13, [sp, #16 * 6]<br>  stp x14, x15, [sp, #16 * 7]<br>  stp x16, x17, [sp, #16 * 8]<br>  stp x18, x19, [sp, #16 * 9]<br>  stp x20, x21, [sp, #16 * 10]<br>  stp x22, x23, [sp, #16 * 11]<br>  stp x24, x25, [sp, #16 * 12]<br>  stp x26, x27, [sp, #16 * 13]<br>  stp x28, x29, [sp, #16 * 14]<br><br>  // store exception link register and saved processor state register<br>  mrs x0, elr_el1<br>  mrs x1, spsr_el1<br>  stp x0, x1, [sp, #16 * 15]<br><br>  // store link register which is x30<br>  str x30, [sp, #16 * 16]<br>  mov x0, sp<br><br>  // call exception handler<br>  bl \handler<br><br>  // exit exception<br>  b .exit_exception<br>.endm<br><br>.exit_exception:<br>  // restore link register<br>  ldr x30, [sp, #16 * 16]<br><br>  // restore exception link register and saved processor state register<br>  ldp x0, x1, [sp, #16 * 15]<br>  msr elr_el1, x0<br>  msr spsr_el1, x1<br><br>  // restore general purpose registers<br>  ldp x28, x29, [sp, #16 * 14]<br>  ldp x26, x27, [sp, #16 * 13]<br>  ldp x24, x25, [sp, #16 * 12]<br>  ldp x22, x23, [sp, #16 * 11]<br>  ldp x20, x21, [sp, #16 * 10]<br>  ldp x18, x19, [sp, #16 * 9]<br>  ldp x16, x17, [sp, #16 * 8]<br>  ldp x14, x15, [sp, #16 * 7]<br>  ldp x12, x13, [sp, #16 * 6]<br>  ldp x10, x11, [sp, #16 * 5]<br>  ldp x8, x9, [sp, #16 * 4]<br>  ldp x6, x7, [sp, #16 * 3]<br>  ldp x4, x5, [sp, #16 * 2]<br>  ldp x2, x3, [sp, #16 * 1]<br>  ldp x0, x1, [sp, #16 * 0]<br><br>  // restore stack pointer<br>  add sp, sp, #CONTEXT_SIZE<br>  eret<br></code></pre></td></tr></table></figure><p>并处理链接脚本<code>aarch64-qemu.ld</code>，为在<code>src/exceptions.s</code>中所定义的<code>exceptions_vector_table</code>选择位置，同时满足其4K对齐要求。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ld">.text :<br>&#123;<br>  KEEP(*(.text.boot))<br>  *(.text.exceptions)<br>  . = ALIGN(4096); /* align for exceptions_vector_table*/<br>  *(.text.exceptions_vector_table)<br>  *(.text)<br>&#125;<br></code></pre></td></tr></table></figure><p>然后在<code>src/start.s</code>中载入异常向量表<code>exception_vector_table</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.section &quot;.text.boot&quot;<br>_start:<br>    ldr     x30, =LD_STACK_PTR<br>    mov   sp, x30<br><br>    // Initialize exceptions<br>    ldr     x0, =exception_vector_table<br>    msr     vbar_el1, x0<br>    isb<br><br>_start_main:<br>    bl      not_main<br></code></pre></td></tr></table></figure><h4 id="异常处理回调函数"><a href="#异常处理回调函数" class="headerlink" title="异常处理回调函数"></a>异常处理回调函数</h4><p>在<code>exceptions.s</code>中我们定义了<code>EXCEPTION_VECTOR</code>宏。在其中，每一类中断都对应一个处理函数，以<code>el1_sp0_sync</code>为例，其代码如下：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">const</span> EL1_SP0_SYNC: &amp;<span class="hljs-symbol">&#x27;static</span> <span class="hljs-type">str</span> = <span class="hljs-string">&quot;EL1_SP0_SYNC&quot;</span>;<br><br><span class="hljs-comment">// 调用我们的print!宏打印异常信息，你也可以选择打印异常发生时所有寄存器的信息</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">catch</span>(ctx: &amp;<span class="hljs-keyword">mut</span> ExceptionCtx, name: &amp;<span class="hljs-type">str</span>) &#123;<br>    crate::<span class="hljs-built_in">print!</span>(<br>        <span class="hljs-string">&quot;\n  \</span><br><span class="hljs-string">        &#123;&#125; @ 0x&#123;:016x&#125;\n\n &quot;</span>,<br>        name,<br>        ctx.elr_el1,<br>    );<br>&#125;<br><br><span class="hljs-meta">#[no_mangle]</span><br><span class="hljs-keyword">unsafe</span> <span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">el1_sp0_sync</span>(ctx: &amp;<span class="hljs-keyword">mut</span> ExceptionCtx) &#123;<br>    <span class="hljs-title function_ invoke__">catch</span>(ctx, EL1_SP0_SYNC);<br>&#125;<br></code></pre></td></tr></table></figure><p>此处还算不上处理，准确的说是定义了一个函数来作为异常发生时的应答，具体如何处理我们将在下一个实验中看到。</p><p>完整的各类处理应答如下：在<code>src/interrupts.rs</code>中新增如下代码：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><code class="hljs rust">global_asm!(<span class="hljs-built_in">include_str!</span>(<span class="hljs-string">&quot;exceptions.s&quot;</span>));<br><br><span class="hljs-meta">#[repr(C)]</span><br><span class="hljs-keyword">pub</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">ExceptionCtx</span> &#123;<br>    regs: [<span class="hljs-type">u64</span>; <span class="hljs-number">30</span>],<br>    elr_el1: <span class="hljs-type">u64</span>,<br>    spsr_el1: <span class="hljs-type">u64</span>,<br>    lr: <span class="hljs-type">u64</span>,<br>&#125;<br><br><span class="hljs-comment">// 输出字符定义，便于观察到是发生某类异常</span><br><span class="hljs-keyword">const</span> EL1_SP0_SYNC: &amp;<span class="hljs-symbol">&#x27;static</span> <span class="hljs-type">str</span> = <span class="hljs-string">&quot;EL1_SP0_SYNC&quot;</span>;<br><span class="hljs-keyword">const</span> EL1_SP0_IRQ: &amp;<span class="hljs-symbol">&#x27;static</span> <span class="hljs-type">str</span> = <span class="hljs-string">&quot;EL1_SP0_IRQ&quot;</span>;<br><span class="hljs-keyword">const</span> EL1_SP0_FIQ: &amp;<span class="hljs-symbol">&#x27;static</span> <span class="hljs-type">str</span> = <span class="hljs-string">&quot;EL1_SP0_FIQ&quot;</span>;<br><span class="hljs-keyword">const</span> EL1_SP0_ERROR: &amp;<span class="hljs-symbol">&#x27;static</span> <span class="hljs-type">str</span> = <span class="hljs-string">&quot;EL1_SP0_ERROR&quot;</span>;<br><span class="hljs-keyword">const</span> EL1_SYNC: &amp;<span class="hljs-symbol">&#x27;static</span> <span class="hljs-type">str</span> = <span class="hljs-string">&quot;EL1_SYNC&quot;</span>;<br><span class="hljs-keyword">const</span> EL1_IRQ: &amp;<span class="hljs-symbol">&#x27;static</span> <span class="hljs-type">str</span> = <span class="hljs-string">&quot;EL1_IRQ&quot;</span>;<br><span class="hljs-keyword">const</span> EL1_FIQ: &amp;<span class="hljs-symbol">&#x27;static</span> <span class="hljs-type">str</span> = <span class="hljs-string">&quot;EL1_FIQ&quot;</span>;<br><span class="hljs-keyword">const</span> EL1_ERROR: &amp;<span class="hljs-symbol">&#x27;static</span> <span class="hljs-type">str</span> = <span class="hljs-string">&quot;EL1_ERROR&quot;</span>;<br><span class="hljs-keyword">const</span> EL0_SYNC: &amp;<span class="hljs-symbol">&#x27;static</span> <span class="hljs-type">str</span> = <span class="hljs-string">&quot;EL0_SYNC&quot;</span>;<br><span class="hljs-keyword">const</span> EL0_IRQ: &amp;<span class="hljs-symbol">&#x27;static</span> <span class="hljs-type">str</span> = <span class="hljs-string">&quot;EL0_IRQ&quot;</span>;<br><span class="hljs-keyword">const</span> EL0_FIQ: &amp;<span class="hljs-symbol">&#x27;static</span> <span class="hljs-type">str</span> = <span class="hljs-string">&quot;EL0_FIQ&quot;</span>;<br><span class="hljs-keyword">const</span> EL0_ERROR: &amp;<span class="hljs-symbol">&#x27;static</span> <span class="hljs-type">str</span> = <span class="hljs-string">&quot;EL0_ERROR&quot;</span>;<br><span class="hljs-keyword">const</span> EL0_32_SYNC: &amp;<span class="hljs-symbol">&#x27;static</span> <span class="hljs-type">str</span> = <span class="hljs-string">&quot;EL0_32_SYNC&quot;</span>;<br><span class="hljs-keyword">const</span> EL0_32_IRQ: &amp;<span class="hljs-symbol">&#x27;static</span> <span class="hljs-type">str</span> = <span class="hljs-string">&quot;EL0_32_IRQ&quot;</span>;<br><span class="hljs-keyword">const</span> EL0_32_FIQ: &amp;<span class="hljs-symbol">&#x27;static</span> <span class="hljs-type">str</span> = <span class="hljs-string">&quot;EL0_32_FIQ&quot;</span>;<br><span class="hljs-keyword">const</span> EL0_32_ERROR: &amp;<span class="hljs-symbol">&#x27;static</span> <span class="hljs-type">str</span> = <span class="hljs-string">&quot;EL0_32_ERROR&quot;</span>;<br><br><span class="hljs-comment">// 调用print!宏打印异常信息，你也可以选择打印异常发生时所有寄存器的信息</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">catch</span>(ctx: &amp;<span class="hljs-keyword">mut</span> ExceptionCtx, name: &amp;<span class="hljs-type">str</span>) &#123;<br>    crate::<span class="hljs-built_in">print!</span>(<br>        <span class="hljs-string">&quot;\n  \</span><br><span class="hljs-string">        &#123;&#125; @ 0x&#123;:016x&#125;\n&quot;</span>,<br>        name, ctx.elr_el1,<br>    );<br>&#125;<br><br><span class="hljs-comment">// 异常处理函数</span><br><span class="hljs-meta">#[no_mangle]</span><br><span class="hljs-keyword">unsafe</span> <span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">el1_sp0_sync</span>(ctx: &amp;<span class="hljs-keyword">mut</span> ExceptionCtx) &#123;<br>    <span class="hljs-title function_ invoke__">catch</span>(ctx, EL1_SP0_SYNC);<br>&#125;<br><span class="hljs-meta">#[no_mangle]</span><br><span class="hljs-keyword">unsafe</span> <span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">el1_sp0_irq</span>(ctx: &amp;<span class="hljs-keyword">mut</span> ExceptionCtx) &#123;<br>    <span class="hljs-title function_ invoke__">catch</span>(ctx, EL1_SP0_IRQ);<br>&#125;<br><span class="hljs-meta">#[no_mangle]</span><br><span class="hljs-keyword">unsafe</span> <span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">el1_sp0_fiq</span>(ctx: &amp;<span class="hljs-keyword">mut</span> ExceptionCtx) &#123;<br>    <span class="hljs-title function_ invoke__">catch</span>(ctx, EL1_SP0_FIQ);<br>&#125;<br><span class="hljs-meta">#[no_mangle]</span><br><span class="hljs-keyword">unsafe</span> <span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">el1_sp0_error</span>(ctx: &amp;<span class="hljs-keyword">mut</span> ExceptionCtx) &#123;<br>    <span class="hljs-title function_ invoke__">catch</span>(ctx, EL1_SP0_ERROR);<br>&#125;<br><span class="hljs-meta">#[no_mangle]</span><br><span class="hljs-keyword">unsafe</span> <span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">el1_sync</span>(ctx: &amp;<span class="hljs-keyword">mut</span> ExceptionCtx) &#123;<br>    <span class="hljs-title function_ invoke__">catch</span>(ctx, EL1_SYNC);<br>&#125;<br><span class="hljs-meta">#[no_mangle]</span><br><span class="hljs-keyword">unsafe</span> <span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">el1_irq</span>(ctx: &amp;<span class="hljs-keyword">mut</span> ExceptionCtx) &#123;<br>    <span class="hljs-title function_ invoke__">catch</span>(ctx, EL1_IRQ);<br>&#125;<br><span class="hljs-meta">#[no_mangle]</span><br><span class="hljs-keyword">unsafe</span> <span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">el1_fiq</span>(ctx: &amp;<span class="hljs-keyword">mut</span> ExceptionCtx) &#123;<br>    <span class="hljs-title function_ invoke__">catch</span>(ctx, EL1_FIQ);<br>&#125;<br><span class="hljs-meta">#[no_mangle]</span><br><span class="hljs-keyword">unsafe</span> <span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">el1_error</span>(ctx: &amp;<span class="hljs-keyword">mut</span> ExceptionCtx) &#123;<br>    <span class="hljs-title function_ invoke__">catch</span>(ctx, EL1_ERROR);<br>&#125;<br><span class="hljs-meta">#[no_mangle]</span><br><span class="hljs-keyword">unsafe</span> <span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">el0_sync</span>(ctx: &amp;<span class="hljs-keyword">mut</span> ExceptionCtx) &#123;<br>    <span class="hljs-title function_ invoke__">catch</span>(ctx, EL0_SYNC);<br>&#125;<br><span class="hljs-meta">#[no_mangle]</span><br><span class="hljs-keyword">unsafe</span> <span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">el0_irq</span>(ctx: &amp;<span class="hljs-keyword">mut</span> ExceptionCtx) &#123;<br>    <span class="hljs-title function_ invoke__">catch</span>(ctx, EL0_IRQ);<br>&#125;<br><span class="hljs-meta">#[no_mangle]</span><br><span class="hljs-keyword">unsafe</span> <span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">el0_fiq</span>(ctx: &amp;<span class="hljs-keyword">mut</span> ExceptionCtx) &#123;<br>    <span class="hljs-title function_ invoke__">catch</span>(ctx, EL0_FIQ);<br>&#125;<br><span class="hljs-meta">#[no_mangle]</span><br><span class="hljs-keyword">unsafe</span> <span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">el0_error</span>(ctx: &amp;<span class="hljs-keyword">mut</span> ExceptionCtx) &#123;<br>    <span class="hljs-title function_ invoke__">catch</span>(ctx, EL0_ERROR);<br>&#125;<br><span class="hljs-meta">#[no_mangle]</span><br><span class="hljs-keyword">unsafe</span> <span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">el0_32_sync</span>(ctx: &amp;<span class="hljs-keyword">mut</span> ExceptionCtx) &#123;<br>    <span class="hljs-title function_ invoke__">catch</span>(ctx, EL0_32_SYNC);<br>&#125;<br><span class="hljs-meta">#[no_mangle]</span><br><span class="hljs-keyword">unsafe</span> <span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">el0_32_irq</span>(ctx: &amp;<span class="hljs-keyword">mut</span> ExceptionCtx) &#123;<br>    <span class="hljs-title function_ invoke__">catch</span>(ctx, EL0_32_IRQ);<br>&#125;<br><span class="hljs-meta">#[no_mangle]</span><br><span class="hljs-keyword">unsafe</span> <span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">el0_32_fiq</span>(ctx: &amp;<span class="hljs-keyword">mut</span> ExceptionCtx) &#123;<br>    <span class="hljs-title function_ invoke__">catch</span>(ctx, EL0_32_FIQ);<br>&#125;<br><span class="hljs-meta">#[no_mangle]</span><br><span class="hljs-keyword">unsafe</span> <span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">el0_32_error</span>(ctx: &amp;<span class="hljs-keyword">mut</span> ExceptionCtx) &#123;<br>    <span class="hljs-title function_ invoke__">catch</span>(ctx, EL0_32_ERROR);<br>&#125;<br></code></pre></td></tr></table></figure><p>至此，我们已经在EL1级别定义了完整的中断处理框架，可以开始处理实际的中断了。</p><h3 id="Timer计时器的原理和时钟中断服务实现"><a href="#Timer计时器的原理和时钟中断服务实现" class="headerlink" title="Timer计时器的原理和时钟中断服务实现"></a>Timer计时器的原理和时钟中断服务实现</h3><h4 id="Timer计时器介绍"><a href="#Timer计时器介绍" class="headerlink" title="Timer计时器介绍"></a>Timer计时器介绍</h4><p>任何AArch64 CPU都应该有一个通用计时器，但是有些板也可以包含外部计时器。arm架构对应的timer文档在<a href="https://developer.arm.com/documentation/102379/0000/What-is-the-Generic-Timer-?lang=en">https://developer.arm.com/documentation/102379/0000/What-is-the-Generic-Timer-?lang=en</a>，里面介绍了timer通用计时器的一些说明。参照设备树中timer的部分</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-title class_">timer</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">interrupts</span> <span class="hljs-operator">=</span> <span class="hljs-params">&lt;<span class="hljs-number">0x01</span> <span class="hljs-number">0x0d</span> <span class="hljs-number">0x104</span> <span class="hljs-number">0x01</span> <span class="hljs-number">0x0e</span> <span class="hljs-number">0x104</span> <span class="hljs-number">0x01</span> <span class="hljs-number">0x0b</span> <span class="hljs-number">0x104</span> <span class="hljs-number">0x01</span> <span class="hljs-number">0x0a</span> <span class="hljs-number">0x104</span>&gt;</span><span class="hljs-punctuation">;</span><br>        <span class="hljs-attr">always-on</span><span class="hljs-punctuation">;</span><br>        <span class="hljs-attr">compatible</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;arm,armv8-timer\0arm,armv7-timer&quot;</span><span class="hljs-punctuation">;</span><br><span class="hljs-punctuation">&#125;;</span><br></code></pre></td></tr></table></figure><p>设备树中说明，timer设备中包括4个中断。以第二个中断的参数<code>0x01 0x0e 0x104</code>为例，其指明该中断为PPI类型的中断，中断号14， 路由到第一个cpu，且高电平触发。但注意到PPI的起始中断号为16，所以实际上该中断在GICv2中的中断号应为<code>16 + 14 = 30</code>。我们将基于此，实现计时器触发中断。</p><p>这里也简单介绍一下<code>timer</code>的计时器：</p><p>在ARM体系结构中，处理器内部有通用计时器，通用计时器包含一组比较器，用来与系统计数器进行比较，一旦通用计时器的值小于等于系统计数器时便会产生时钟中断。timer寄存器如下：</p><ul><li><p>CNTPCT_EL0- physical counter value register</p></li><li><p>CNTP_CTL_EL0- physical counter control register</p></li><li><p>CNTP_TVAL_EL0 and CNTP_CVAL_EL0- two threshold value registers, 定时寄存器（TVAL） and 比较寄存器（CVAL）</p></li><li><p>CNTFRQ_EL0- counter frequency register</p></li></ul><ol><li><p>对于系统计数器来说，可以通过读取控制寄存器CNTPCT_EL0来获得当前的系统计数值（无论处于哪个异常级别）</p></li><li><p><strong>比较寄存器有64位，如果设置了之后，当系统计数器达到或超过了这个值之后（CVAL&lt;系统计数器），就会触发定时器中断。</strong></p></li><li><p><strong>定时寄存器有32位，如果设置了之后，会将比较寄存器设置成当前系统计数器加上设置的定时寄存器的值（CVAL&#x3D;系统计数器+TVAL）</strong></p></li><li><p>每组定时器都还有一个控制寄存器（CTL），其只有最低三位有意义，其它的60位全是保留的，设置成0.</p></li></ol><blockquote><ul><li><p>0:ENABLE：是否打开定时器，使其工作；</p></li><li><p>1:IMASK：中断掩码，如果设置成1，则即使定时器是工作的，仍然不会发出中断；</p></li><li><p>2:ISTATUS：如果定时器打开的话，且满足了触发条件，则将这一位设置成1。</p></li></ul></blockquote><p>原理上讲，我们只需要在时钟开始时对定时器进行一次初始化，而在计时时间到达时，系统将会触发一次时钟中断，从而引发一次<code>el1_irq</code>异常。之后相对应的异常回调函数将调用输出，打印异常。</p><h4 id="时钟中断服务"><a href="#时钟中断服务" class="headerlink" title="时钟中断服务"></a>时钟中断服务</h4><p>了解了原理之后，我们尝试实现时钟中断。我们首先需要在系统启动时进行初始化，启用定时器并启用时钟中断（设置控制寄存器），然后设置定时。我们在<code>src/interrupts.rs</code>文件的<code>init_gicv2</code>初始化函数中新增如下内容：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 电平触发</span><br><span class="hljs-keyword">const</span> ICFGR_LEVEL: <span class="hljs-type">u32</span> = <span class="hljs-number">0</span>;<br><span class="hljs-comment">// 时钟中断号30</span><br><span class="hljs-keyword">const</span> TIMER_IRQ: <span class="hljs-type">u32</span> = <span class="hljs-number">30</span>;<br><br><span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">init_gicv2</span>() &#123;<br>    <span class="hljs-comment">// ...</span><br><br>    <span class="hljs-title function_ invoke__">set_config</span>(TIMER_IRQ, ICFGR_LEVEL); <span class="hljs-comment">//电平触发</span><br>    <span class="hljs-title function_ invoke__">set_priority</span>(TIMER_IRQ, <span class="hljs-number">0</span>); <span class="hljs-comment">//优先级设定</span><br>    <span class="hljs-title function_ invoke__">clear</span>(TIMER_IRQ); <span class="hljs-comment">//清除中断请求</span><br>    <span class="hljs-title function_ invoke__">enable</span>(TIMER_IRQ); <span class="hljs-comment">//使能中断</span><br><br>    <span class="hljs-comment">//配置timer</span><br>    <span class="hljs-keyword">unsafe</span> &#123;<br>        asm!(<span class="hljs-string">&quot;mrs x1, CNTFRQ_EL0&quot;</span>); <span class="hljs-comment">//读取系统频率</span><br>        asm!(<span class="hljs-string">&quot;msr CNTP_TVAL_EL0, x1&quot;</span>);  <span class="hljs-comment">//设置定时寄存器</span><br>        asm!(<span class="hljs-string">&quot;mov x0, 1&quot;</span>);<br>        asm!(<span class="hljs-string">&quot;msr CNTP_CTL_EL0, x0&quot;</span>); <span class="hljs-comment">//设置控制器，令其enable=1, imask=0, istatus= 0</span><br>        asm!(<span class="hljs-string">&quot;msr daifclr, #2&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><del>在这里我们将这个函数设置成为了低电平触发，所以我们在主函数调用时需要将系统转入低电平的运行状态。</del></p><p>这里的<code>wfi</code>是使系统进入休眠状态，这里我们并不需要，低电平触发是指系统的每一个指令周期结束时触发。</p><p>由于我们的系统一执行完输出就结束了，我们希望它能够保持开机状态，故使用一个死循环来保证系统不会关机。编辑<code>src/main.rs</code>，结果如下：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 不使用标准库</span><br><span class="hljs-meta">#![no_std]</span><br><span class="hljs-comment">// 不使用预定义入口点</span><br><span class="hljs-meta">#![no_main]</span><br><span class="hljs-meta">#![feature(global_asm)]</span><br><span class="hljs-meta">#![feature(asm)]</span> <span class="hljs-comment">// 为interrupts.rs和main.rs调用内联汇编</span><br><br><span class="hljs-keyword">mod</span> panic;<br><span class="hljs-keyword">mod</span> uart_console;<br><span class="hljs-keyword">mod</span> interrupts; <span class="hljs-comment">// 引入中断</span><br><br>global_asm!(<span class="hljs-built_in">include_str!</span>(<span class="hljs-string">&quot;start.s&quot;</span>));<br><br><span class="hljs-meta">#[no_mangle]</span> <span class="hljs-comment">// 不修改函数名</span><br><span class="hljs-keyword">pub</span> <span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">not_main</span>() &#123;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;[0] Hello from Rust!&quot;</span>);<br>    interrupts::<span class="hljs-title function_ invoke__">init_gicv2</span>(); <span class="hljs-comment">//初始化gicv2和timer</span><br>    <span class="hljs-comment">/* 勘误</span><br><span class="hljs-comment">    unsafe &#123;</span><br><span class="hljs-comment">        loop &#123; // 轮询系统中断</span><br><span class="hljs-comment">            asm!(&quot;wfi&quot;); // 将系统置于低电平运行状态</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">    &#125;*/</span><br>    <span class="hljs-keyword">loop</span> &#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后编译运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">cargo build<br>qemu-system-aarch64 -machine virt -m 1024M -cpu cortex-a53 -nographic -kernel target/aarch64-unknown-none-softfloat/debug/blogos_armv8<br></code></pre></td></tr></table></figure><p>运行结果如下：</p><p><img src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/blogos-armv8/timerACK.png" alt="引发el1_irq异常"></p><p>系统不断打印触发了<code>el1_irq</code>信息。这里的循环是因为我们只接收了中断，而中断引发的异常并未被处理，寄存器未被复位所以不断触发异常。</p>]]></content>
    
    
    <categories>
      
      <category>BlogOS_for_armv8</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Course</tag>
      
      <tag>os</tag>
      
      <tag>rust</tag>
      
      <tag>blogos</tag>
      
      <tag>armv8</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>rust写个操作系统——课程实验blogos移至armV8深度解析：实验二 Hello World</title>
    <link href="/4735f31b.html"/>
    <url>/4735f31b.html</url>
    
    <content type="html"><![CDATA[<div class="note note-info">            <blockquote><p>你将在每个实验对应分支上都看到这句话，确保作者实验代码在被下载后，能在正确的环境中运行。</p></blockquote><p>运行环境请参考: <a href="https://noionion.top/adfdff.html">lab1 环境搭建</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">cargo build<br>qemu-system-aarch64 -machine virt -m 1024M -cpu cortex-a53 -nographic -kernel target/aarch64-unknown-none-softfloat/debug/blogos_armv8 -semihosting<br></code></pre></td></tr></table></figure>          </div><h2 id="实验二-Hello-World"><a href="#实验二-Hello-World" class="headerlink" title="实验二 Hello World"></a>实验二 Hello World</h2><p>上一个实验里，我们已经初步实现了让内核运行一开始输出<code>&quot;Hello World&quot;</code>，也初步了解到程序是如何调用硬件设备的寄存器。然而我们希望能在实验的每一个rust代码文件中，都能方便的调用<code>print</code>，而不是每一次输出都需要写一大串代码。</p><p>用函数模块化固然是个不错的方法，但当我们想调用它时就需要向<code>c</code>语言那样调用<code>stdio.h</code>头文件。这时候我们就需要了解<code>rust</code>本身的一个高级特性：宏</p><p>所以实验二我们将实现<code>rust</code>中最经典的宏：<code>print!</code>和<code>println!</code>，以便于后续的调试输出。</p><p>注：至于实验指导书中关于<code>virt</code>机器和设备树的部分，我会将其放到选做的实验三。实验三选做但是必要，是理解后续实验的关键。另外吐槽的是这节的实验指导书意外的还不错，我可以偷懒一点。</p><hr><h3 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h3><p>实验二的开头是这么说的：</p><blockquote><p>本实验的目的在于理解操作系统与硬件的接口方法，并实现一个可打印字符的宏（非系统调用），用于后续的调试和开发。</p></blockquote><p>其实我们在<code>not_main</code>函数中就已经完成的对串口作了硬件上的调用，而更具体的调用则需要阅读设备树源文件和设备寄存器接口文档。这将在实验三实验四会有更实际的体现。所以实验目的我认为是如下几点（第一点其实也不太重要）：</p><ol><li><p>初步了解rust宏（rust语言特性，可略过）</p></li><li><p>将实验一的输出封装成实例以便调用</p></li><li><p>将实例封装成宏，实现<code>print!</code>和<code>println!</code></p></li></ol><hr><h3 id="rust-宏（选看）"><a href="#rust-宏（选看）" class="headerlink" title="rust 宏（选看）"></a>rust 宏（选看）</h3><h4 id="什么是宏？"><a href="#什么是宏？" class="headerlink" title="什么是宏？"></a>什么是宏？</h4><p>熟悉C&#x2F;C++的应该很熟悉宏（<code>Macro</code>）的概念，而Rust初学者也必定会接触到Rust中的宏。</p><p>可以简单地理解为：宏即编译时将执行的一系列指令。其重点在于「编译时」，尽管宏与函数（或方法）形似，函数是在运行时发生调用的，而宏是在编译时执行的。</p><p>不同于C&#x2F;C++中的宏，Rust的宏并非简单的文本替换，而是在词法层面甚至语法树层面作替换，其功能更加强大，也更加安全。</p><p>如下所示的一个C++的宏SQR的定义</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SQR(x) (x * x)</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; SQR(<span class="hljs-number">1</span> + <span class="hljs-number">1</span>) &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们希望它输出4，但很遗憾它将输出3，因为<code>SQR(1 + 1)</code>在预编译阶段通过文本替换展开将得到<code>(1 + 1 * 1 + 1)</code>（替换时没给你加括号），并非我们所期望的语义。</p><p>而在Rust中，按如下方式定义的宏：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-built_in">macro_rules!</span> sqr &#123;<br>    ($x:expr) =&gt; &#123;$x * $x&#125;<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, sqr!(<span class="hljs-number">1</span> + <span class="hljs-number">1</span>));<br>&#125;<br></code></pre></td></tr></table></figure><p>将得到正确的答案4。这是因为Rust的宏展开发生在语法分析阶段，此时编译器知道sqr!宏中的$x变量是一个表达式（用$x:expr标记），所以在展开后它知道如何正确处理，会将其展开为<code>((1 + 1) * (1 + 1))</code>。</p><hr><h4 id="宏和函数的区别"><a href="#宏和函数的区别" class="headerlink" title="宏和函数的区别"></a>宏和函数的区别</h4><p>从根本上来说，宏是一种为写其他代码而写代码的方式，即所谓的<strong>元编程（metaprogramming）</strong>。所有的这些宏以<strong>展开</strong>的方式来生成比你所手写出的更多的代码。</p><p>元编程对于减少大量编写和维护的代码是非常有用的，它也扮演了函数扮演的角色。但宏有一些函数所没有的附加能力。</p><p>一个函数标签必须声明函数参数个数和类型。相比之下，宏能够接受不同数量的参数：用一个参数调用<code>println!(&quot;hello&quot;)</code>或用两个参数调用<code>println!(&quot;hello &#123;&#125;&quot;, name)</code>。而且，宏可以在编译器翻译代码前展开，例如，宏可以在一个给定类型上实现<code>trait</code>。而函数则不行，因为函数是在运行时被调用，同时<code>trait</code>需要在编译时实现。</p><p>实现一个宏而不是一个函数的缺点是宏定义要比函数定义更复杂，因为你正在编写<strong>生成 Rust 代码的 Rust 代码</strong>。由于这样的间接性，宏定义通常要比函数定义更难阅读、理解以及维护。</p><p>宏和函数的最后一个重要的区别是：在一个文件里调用宏之前必须定义它，或将其引入作用域，而函数则可以在任何地方定义和调用。</p><hr><h4 id="宏的分类"><a href="#宏的分类" class="headerlink" title="宏的分类"></a>宏的分类</h4><p>宏可以分为：使用 macro_rules! 的 声明（Declarative）宏，和三种 过程（Procedural）宏：</p><ul><li><p>自定义 #[derive] 宏在结构体和枚举上指定通过 derive 属性添加的代码</p></li><li><p>类属性（Attribute-like）宏定义可用于任意项的自定义属性</p></li><li><p>类函数宏看起来像函数不过作用于作为参数传递的 token</p></li></ul><p>这里我们只了解声明宏。我们的<code>print!</code>和<code>println!</code>宏都是声明宏。</p><hr><h4 id="声明宏"><a href="#声明宏" class="headerlink" title="声明宏"></a>声明宏</h4><p>Rust 最常用的宏形式是 声明宏（declarative macros）。它们有时也被称为 “macros by example”、“macro_rules! 宏” 或者就是 “macros”。其核心概念是，声明宏允许我们编写一些类似 Rust match 表达式的代码。match 表达式是控制结构，其接收一个表达式，与表达式的结果进行模式匹配，然后根据模式匹配执行相关代码。宏也将一个值和包含相关代码的模式进行比较；此种情况下，该值是传递给宏的 Rust 源代码字面值，模式用于和传递给宏的源代码进行比较，同时每个模式的相关代码则用于替换传递给宏的代码。所有这一切都发生于编译时。</p><p>可以使用 macro_rules! 来定义宏，如：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-meta">#[macro_export]</span><br><span class="hljs-built_in">macro_rules!</span> vec &#123;<br>    ( $( $x:expr ),* ) =&gt; &#123;<br>        &#123;<br>            <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">temp_vec</span> = Vec::<span class="hljs-title function_ invoke__">new</span>();<br>            $(<br>                temp_vec.<span class="hljs-title function_ invoke__">push</span>($x);<br>            )*<br>            temp_vec<br>        &#125;<br>    &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><p>无论何时导入定义了宏的包，<code>#[macro_export]</code>注解说明宏应该是可用的。 如果没有该注解，这个宏不能被引入作用域。</p><p>接着使用 <code>macro_rules!</code> 和宏名称开始宏定义，且所定义的宏并不带感叹号。名字后跟大括号表示宏定义体，在该例中宏名称是 <code>vec</code> 。</p><p>首先，一对括号包含了整个模式。接下来是美元符号（<code>$</code>），后跟一对括号，捕获了符合括号内模式的值以用于替换后的代码。<code>$()</code>内则是<code>$x:expr</code>，其匹配Rust的任意表达式，并将该表达式记作<code>$x</code>。</p><p><code>$()</code>之后的逗号说明一个可有可无的逗号分隔符可以出现在<code>$()</code>所匹配的代码之后。紧随逗号之后的<code>*</code>说明该模式匹配零个或更多个<code>*</code>之前的任何模式。</p><p>当以<code>vec![1, 2, 3];</code>调用宏时，<code>$x</code>模式与三个表达式 1、2 和 3 进行了三次匹配。</p><h3 id="Write-实例实现和测试"><a href="#Write-实例实现和测试" class="headerlink" title="Write 实例实现和测试"></a>Write 实例实现和测试</h3><h4 id="实例实现"><a href="#实例实现" class="headerlink" title="实例实现"></a>实例实现</h4><p>回顾实验一的<code>main.rs</code>代码，看看我们是如何实现输出<code>Hello World</code>的</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">const</span> UART0: *<span class="hljs-keyword">mut</span> <span class="hljs-type">u8</span> = <span class="hljs-number">0x0900_0000</span> <span class="hljs-keyword">as</span> *<span class="hljs-keyword">mut</span> <span class="hljs-type">u8</span>;<br><span class="hljs-keyword">let</span> <span class="hljs-variable">out_str</span> = <span class="hljs-string">b&quot;Hello World&quot;</span>;<br><span class="hljs-keyword">for</span> <span class="hljs-variable">byte</span> <span class="hljs-keyword">in</span> out_str &#123;<br>    <span class="hljs-keyword">unsafe</span> &#123;<br>        ptr::<span class="hljs-title function_ invoke__">write_volatile</span>(UART0, *byte);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们向<code>UART</code>串口循环写入我们想输出的字符。于是我们定义一个<code>Write</code>结构来实现输出单个字符和字符串：</p><p>新建<code>src/uart_console.rs</code>，定义如下结构：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">//嵌入式系统使用串口，而不是vga，直接输出，没有颜色控制，不记录列号，也没有frame buffer，所以采用空结构</span><br><span class="hljs-keyword">pub</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">Writer</span>;<br><br><span class="hljs-comment">//往串口寄存器写入字节和字符串进行输出</span><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">Writer</span> &#123;<br>    <span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">write_byte</span>(&amp;<span class="hljs-keyword">mut</span> <span class="hljs-keyword">self</span>, byte: <span class="hljs-type">u8</span>) &#123;<br>        <span class="hljs-keyword">const</span> UART0: *<span class="hljs-keyword">mut</span> <span class="hljs-type">u8</span> = <span class="hljs-number">0x0900_0000</span> <span class="hljs-keyword">as</span> *<span class="hljs-keyword">mut</span> <span class="hljs-type">u8</span>;<br>        <span class="hljs-keyword">unsafe</span> &#123;<br>            ptr::<span class="hljs-title function_ invoke__">write_volatile</span>(UART0, byte);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">write_string</span>(&amp;<span class="hljs-keyword">mut</span> <span class="hljs-keyword">self</span>, s: &amp;<span class="hljs-type">str</span>) &#123;<br>        <span class="hljs-keyword">for</span> <span class="hljs-variable">byte</span> <span class="hljs-keyword">in</span> s.<span class="hljs-title function_ invoke__">chars</span>() &#123;<br>            <span class="hljs-keyword">self</span>.<span class="hljs-title function_ invoke__">write_byte</span>(byte <span class="hljs-keyword">as</span> <span class="hljs-type">u8</span>)<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>与<code>main.rs</code>中的输出进行对比，便显得很容易理解。我们为<code>Write</code>结构实现<code>core::fmt::Write trait(特性)</code>。继续向文件中加入如下代码：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">impl</span> <span class="hljs-title class_">core</span>::fmt::Write <span class="hljs-keyword">for</span> <span class="hljs-title class_">Writer</span> &#123;<br>  <span class="hljs-keyword">fn</span> <span class="hljs-title function_">write_str</span>(&amp;<span class="hljs-keyword">mut</span> <span class="hljs-keyword">self</span>, s: &amp;<span class="hljs-type">str</span>) <span class="hljs-punctuation">-&gt;</span> fmt::<span class="hljs-type">Result</span> &#123;<br>      <span class="hljs-keyword">self</span>.<span class="hljs-title function_ invoke__">write_string</span>(s);<br>      <span class="hljs-title function_ invoke__">Ok</span>(())<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>由于我们实现了 write_str ，核心库会帮我们自动实现 write_fmt 。进一步了解这部分内容，可以阅读 rust 官方文档中 <a href="https://doc.rust-lang.org/core/fmt/trait.Write.html">core::fmt::Write 部分</a> 和 <a href="https://doc.rust-lang.org/book/ch10-02-traits.html">rust 官方教程中 Traits</a> 部分。</p><p>基于Rust的<code>core::fmt</code>实现格式化控制，可以使我们方便地打印不同类型的变量。实现<code>core::fmt::Write</code>后，我们就可以使用Rust内置的格式化宏<code>write!</code>和<code>writeln!</code>，这使改结构具有其他语言运行时所提供的格式化控制能力。</p><hr><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>向<code>main.rs</code>中加入测试函数，并修改<code>not_main</code>函数</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-meta">#[no_mangle]</span> <span class="hljs-comment">// 不修改函数名</span><br><span class="hljs-keyword">pub</span> <span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">not_main</span>() &#123;<br>    <span class="hljs-title function_ invoke__">print_something</span>();<br>&#125;<br><br><span class="hljs-comment">//以下是测试代码部分</span><br>include!(<span class="hljs-string">&quot;uart_console.rs&quot;</span>);<br><span class="hljs-comment">//引用Writer需要的控件</span><br><span class="hljs-keyword">use</span> core::fmt;<br><span class="hljs-keyword">use</span> core::fmt::Write;<br><br><span class="hljs-comment">//测试函数</span><br><span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">print_something</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">writer</span> = Writer&#123;&#125;;<br><br>    <span class="hljs-comment">// 测试Writer我们实现的两个函数</span><br>    writer.<span class="hljs-title function_ invoke__">write_byte</span>(<span class="hljs-string">b&#x27;H&#x27;</span>);<br>    writer.<span class="hljs-title function_ invoke__">write_string</span>(<span class="hljs-string">&quot;ello &quot;</span>);<br>    writer.<span class="hljs-title function_ invoke__">write_string</span>(<span class="hljs-string">&quot;Wörld!\n&quot;</span>);<br>    writer.<span class="hljs-title function_ invoke__">write_string</span>(<span class="hljs-string">&quot;[0] Hello from Rust!&quot;</span>);<br><br>    <span class="hljs-comment">// 验证实现core::fmt::Write自动实现的方法</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">display</span>: fmt::Arguments = <span class="hljs-built_in">format_args!</span>(<span class="hljs-string">&quot;hello arguments!\n&quot;</span>);<br>    writer.<span class="hljs-title function_ invoke__">write_fmt</span>(display).<span class="hljs-title function_ invoke__">unwrap</span>();<br>    <span class="hljs-comment">// 使用write!宏进行格式化输出</span><br>    <span class="hljs-built_in">write!</span>(writer, <span class="hljs-string">&quot;The numbers are &#123;&#125; and &#123;&#125; \n&quot;</span>, <span class="hljs-number">42</span>, <span class="hljs-number">1.0</span>/<span class="hljs-number">3.0</span>).<span class="hljs-title function_ invoke__">unwrap</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p><code>cargo build</code>后并运行进行测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">cargo build<br>qemu-system-aarch64 -machine virt -m 1024M -cpu cortex-a53 -nographic -kernel target/aarch64-unknown-none-softfloat/debug/blogos_armv8<br></code></pre></td></tr></table></figure><p><img src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/blogos-armv8/5.png" alt="测试输出"></p><hr><h3 id="print-和println-封装"><a href="#print-和println-封装" class="headerlink" title="print!和println!封装"></a>print!和println!封装</h3><p>现在我们已经可以采用print_something函数通过串口输出字符了。但为了输出，我们需要两个步骤：</p><p>（1）创建Writer类型的实例</p><p>（2）调用实例的write_byte或write_string等函数。</p><p>为了方便在其他模块中调用，我们希望可以直接执行步骤（2）而不是首先执行上述步骤（1）再执行步骤（2）。</p><p>一般情况下可以通过将步骤（1）中的实例定义为static类型来实现</p><hr><h4 id="Write全局接口"><a href="#Write全局接口" class="headerlink" title="Write全局接口"></a>Write全局接口</h4><p>我们尝试创建一个静态的WRITER变量：编辑<code>src/uart_console.rs</code>，新增：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">pub</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">ref</span> WRITER: Writer = Writer&#123;&#125;;<br></code></pre></td></tr></table></figure><p>我们尝试构建，却发生了错误。为了明白现在发生了什么，我们需要知道一点：一般的变量在运行时初始化，而静态变量在编译时初始化。Rust编译器规定了一个称为常量求值器<code>（const evaluator）</code>的组件，它应该在编译时处理这样的初始化工作。所以Rust暂不支持Writer这样类型的静态变量（编译时）初始化。</p><ul><li><p>延迟初始化</p><blockquote><p>使用非常函数初始化静态变量是Rust程序员普遍遇到的问题。幸运的是，有一个叫做<code>lazy_static</code>的包提供了一个很棒的解决方案：它提供了名为<code>lazy_static!</code>的宏，定义了一个延迟初始化<code>（lazily initialized）</code>的静态变量；这个变量的值将<strong>在第一次使用时计算，而非在编译时计算</strong>。这时，变量的初始化过程将在运行时执行，任意的初始化代码——无论简单或复杂——都是能够使用的。</p></blockquote><p>  现在我们引入<code>lazy_static</code>包：</p><p>  编辑<code>Cargo.toml</code>，向其中加入如下依赖：(在这里，由于程序不连接标准库，我们需要启用<code>spin_no_std</code>特性。)</p>  <figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs toml"><span class="hljs-section">[dependencies.lazy_static]</span><br><span class="hljs-attr">version</span> = <span class="hljs-string">&quot;1.0&quot;</span><br><span class="hljs-attr">features</span> = [<span class="hljs-string">&quot;spin_no_std&quot;</span>]<br></code></pre></td></tr></table></figure><p>  然后将上述的静态变量<code>WRITER</code>的定义处套一层<code>lazy_static!</code>宏：</p>  <figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">use</span> lazy_static::lazy_static;<br><br>lazy_static! &#123;<br>    <span class="hljs-keyword">pub</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">ref</span> WRITER: Writer = Writer&#123;&#125;;<br>&#125;<br></code></pre></td></tr></table></figure><p>  再次编译可发现编译成功。然而，这个WRITER可能没有什么用途，因为它目前还是不可变变量<code>（immutable variable）</code>：这意味着我们无法向它写入数据，因为所有与写入数据相关的方法都需要实例的可变引用<code>&amp;mut self</code>。</p><p>  一种解决方案是使用可变静态<code>（mutable static）</code>的变量，但所有对它的读写操作都被规定为不安全的（unsafe）操作，因为这很容易导致数据竞争或发生其它不好的事情——使用<code>static mut</code>极其不被赞成，甚至有一些提案认为应该将它删除。</p></li><li><p>自旋锁</p><blockquote><p>要定义同步的<strong>内部可变</strong>性，我们往往使用标准库提供的互斥锁类<code>Mutex</code>，它通过提供当资源被占用时将线程阻塞<code>（block）</code>的互斥条件<code>（mutual exclusion）</code>实现这一点；</p><p>但我们初步的内核代码还没有线程和阻塞的概念，我们将不能使用这个类（而且我们也不能用标准库）。不过，我们还有一种较为基础的互斥锁实现方式——自旋锁<code>（spinlock）</code>。</p><p><strong>自旋锁</strong>并不会调用阻塞逻辑，而是<strong>在一个小的无限循环中反复尝试获得这个锁</strong>，也因此会一直占用CPU时间，直到互斥锁被它的占用者释放。</p></blockquote><p>  简单的说，我们在从某个资源中读写数据知识，我们需要保证这个资源一直被我们所占用，<strong>以免被其它的读写操作修改而导致结果错误，或引发一些其他的安全性问题</strong>。（众所周知rust十分注重安全）</p><p>  向<code>Cargo.toml</code>加入如下依赖：<br>  <figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs toml"><span class="hljs-section">[dependencies]</span><br><span class="hljs-attr">spin</span> = <span class="hljs-string">&quot;0.9.2&quot;</span><br></code></pre></td></tr></table></figure></p><p>  然后再次修改我们的静态变量<code>WRITER</code>的定义：</p>  <figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">use</span> lazy_static::lazy_static;<br><span class="hljs-keyword">use</span> spin::Mutex;<br><br>lazy_static! &#123;<br>    <span class="hljs-keyword">pub</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">ref</span> WRITER: Mutex&lt;Writer&gt; = Mutex::<span class="hljs-title function_ invoke__">new</span>(Writer &#123; &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p>  此时我们的<code>WRITER</code>才能可修改的全局静态变量，为我们<code>print!</code>和<code>println</code>宏的实现做好了准备。</p></li></ul><hr><h4 id="实现-print-宏"><a href="#实现-print-宏" class="headerlink" title="实现 print! 宏"></a>实现 print! 宏</h4><p>现在我们可以开始实现<code>print!</code>和<code>println!</code>了。我们继续向<code>src\uart_console.rs</code>中写入：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-meta">#[doc(hidden)]</span><br><span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">_print</span>(args: fmt::Arguments) &#123;<br>    <span class="hljs-keyword">use</span> core::fmt::Write;<br>    WRITER.<span class="hljs-title function_ invoke__">lock</span>().<span class="hljs-title function_ invoke__">write_fmt</span>(args).<span class="hljs-title function_ invoke__">unwrap</span>();<br>&#125;<br><br><span class="hljs-meta">#[macro_export]</span><br><span class="hljs-built_in">macro_rules!</span> print &#123;<br>    ($($arg:tt)*) =&gt; ($crate::uart_console::_print(<span class="hljs-built_in">format_args!</span>($($arg)*)));<br>&#125;<br><br><span class="hljs-meta">#[macro_export]</span><br><span class="hljs-built_in">macro_rules!</span> println &#123;<br>    () =&gt; ($crate::<span class="hljs-built_in">print!</span>(<span class="hljs-string">&quot;\n&quot;</span>));<br>    ($($arg:tt)*) =&gt; ($crate::<span class="hljs-built_in">print!</span>(<span class="hljs-string">&quot;&#123;&#125;\n&quot;</span>, <span class="hljs-built_in">format_args!</span>($($arg)*)));<br>&#125;<br></code></pre></td></tr></table></figure><p>函数<code>_print</code>和<code>print!</code>宏是从标准库中得到的，而<code>println!</code>宏则作了一点修改。</p><p>我们在每个使用的<code>print!</code>宏前面添加了<code>$crate</code>变量。这样我们在只需要使用<code>println!</code>时，不必也编写代码导入<code>print!</code>宏。</p><ol><li><p>首先是关于<code>_print</code>函数：</p><blockquote><p>我们在静态变量<code>WRITER</code>中引入了自旋锁，而<code>_print</code>函数调用时，将通过<code>.lock</code>来完成对<code>WRITER</code>锁的占有。同时<code>_print</code>函数并调用它的write_fmt方法。这个方法是从名为<code>Write</code>的特性中获得的，所以我们需要导入这个特性。额外的<code>unwrap()</code>函数将在打印不成功的时候<code>panic</code>；但实际上我们的<code>write_str</code>总是返回Ok，这种情况不应该发生。</p><p>考虑到这个函数是一个私有的实现细节，我们添加一个doc(hidden)属性，防止它在生成的文档中出现。（事实上这个实验也不会去生成文档）</p></blockquote></li><li><p>根据声明宏的定义，我们为两个宏都添加了#[macro_export]属性，这样在包的其它地方也可以使用它们。</p><blockquote><p>需要注意的是，这将占用包的根命名空间<code>（root namespace）</code>，所以我们调用不能通过<code>use crate::uart_console::print</code>来导入，也不能直接通过<code>crate::uart_console::print!()</code>来调用它。</p></blockquote><p> 故，我们应该使用<code>use crate::print</code>导入或直接通过<code>crate::print!()</code>进行调用。</p></li></ol><hr><h4 id="调用宏并测试"><a href="#调用宏并测试" class="headerlink" title="调用宏并测试"></a>调用宏并测试</h4><p>我们不再以额外文件<code>include!</code>的方式添加到<code>main.rs</code>，而是将其作为模块导入。</p><p>我们删除上一节中<code>main.rs</code>的测试代码，然后修改成如下（最终完整的<code>main.rs</code>文件）</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 不使用标准库</span><br><span class="hljs-meta">#![no_std]</span><br><span class="hljs-comment">// 不使用预定义入口点</span><br><span class="hljs-meta">#![no_main]</span><br><span class="hljs-meta">#![feature(global_asm)]</span><br><br><span class="hljs-keyword">mod</span> panic;<br><span class="hljs-keyword">mod</span> uart_console;<br><br>global_asm!(<span class="hljs-built_in">include_str!</span>(<span class="hljs-string">&quot;start.s&quot;</span>));<br><br><span class="hljs-meta">#[no_mangle]</span> <span class="hljs-comment">// 不修改函数名</span><br><span class="hljs-keyword">pub</span> <span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">not_main</span>() &#123;<br>    <span class="hljs-built_in">print!</span>(<span class="hljs-string">&quot;Hello!&quot;</span>);<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;[0] Hello from Rust!&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>并在<code>src/uart_console.rs</code>开头导入<code>fmt</code>和<code>ptr</code>库</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">use</span> core::&#123;fmt, ptr&#125;;<br></code></pre></td></tr></table></figure><p>然后编译运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">cargo build<br>qemu-system-aarch64 -machine virt -m 1024M -cpu cortex-a53 -nographic -kernel target/aarch64-unknown-none-softfloat/debug/rui_armv8_os<br></code></pre></td></tr></table></figure><p><img src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/blogos-armv8/6.png" alt="输出宏实现"></p>]]></content>
    
    
    <categories>
      
      <category>BlogOS_for_armv8</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Course</tag>
      
      <tag>os</tag>
      
      <tag>rust</tag>
      
      <tag>blogos</tag>
      
      <tag>armv8</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>rust写个操作系统——课程实验blogos移至armV8深度解析：实验一 环境配置</title>
    <link href="/adfdff.html"/>
    <url>/adfdff.html</url>
    
    <content type="html"><![CDATA[<div class="note note-info">            <blockquote><p>你将在每个实验对应分支上都看到这句话，确保作者实验代码在被下载后，能在正确的环境中运行。</p></blockquote><p>运行环境请参考: <a href="https://noionion.top/adfdff.html">lab1 环境搭建</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">cargo build<br>qemu-system-aarch64 -machine virt -m 1024M -cpu cortex-a53 -nographic -kernel target/aarch64-unknown-none-softfloat/debug/blogos_armv8 -semihosting<br></code></pre></td></tr></table></figure>          </div><h2 id="实验一-环境配置"><a href="#实验一-环境配置" class="headerlink" title="实验一 环境配置"></a>实验一 环境配置</h2><p>这是实验的开始。由于我们的目标是编写一个操作系统，所以首先我们需要创建一个独立于操作系统的可执行程序，又称 <strong>独立式可执行程序（freestanding executable）</strong> 或 <strong>裸机程序（bare-metal executable）</strong> 。然后我们将此程序编译成为内核。</p><p>我们编写的独立程序得十分纯净，这意味着所有依赖于操作系统的库我们都不能使用。比如 std 中的大部分内容（io, thread, file system, etc.）都需要操作系统的支持，所以这部分内容我们不能使用。</p><p>但是，不依赖与操作系统的 rust 的语言特性 我们还是可以继续使用的，比如：迭代器、模式匹配、字符串格式化、所有权系统等。这使得 rust 依旧可以作为一个功能强大的高级语言，帮助我们编写操作系统。</p><p>最小化内核只干了两件事：能开机在屏幕上输出点东西，以及能保持运行。</p><hr><h3 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h3><p>因此实验一的代码也只让你干了这两件事。终上所述，实验一的目的在于：</p><ol><li><p>装好rust，装对版本</p></li><li><p>装好<code>qemu</code>虚拟机来跑我们想运行的操作系统</p></li><li><p>装好交叉编译用的调试工具<code>aarch64-none-elf-gdb</code></p></li><li><p>了解最小化内核（或者说裸机）是什么，它包含什么，并且我们要能在<code>qemu</code>里边跑的动它。</p></li><li><p>学会用<code>gdb</code>远程调试这个内核，起码要会查看地址等等</p></li></ol><p>知道了这个实验要干什么，我们可以一条一条开始学习了！</p><hr><h3 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h3><h4 id="安装rust"><a href="#安装rust" class="headerlink" title="安装rust"></a>安装rust</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get install gcc<br>curl --proto <span class="hljs-string">&#x27;=https&#x27;</span> --tlsv1.2 -sSf https://sh.rustup.rs | sh<br><span class="hljs-built_in">source</span> <span class="hljs-variable">$HOME</span>/.cargo/env<br>cargo install cargo-binutils rustfilt<br></code></pre></td></tr></table></figure><p>全新安装 <code>rust</code>之后，鉴于实现操作系统时需要的各种并非出现在正式 <code>rust</code>版本中的特性（如内联汇编语句 <code>asm!()</code>)，以及实验要求的版本（这点在实验指导书中不是很明确的说明，<code>rust nightly</code>各版本代码差异极大，故在这里明确申明实验所用 <code>rust</code>版本）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">rustup install nightly-2021-11-20<br>rustup default nightly-2021-11-20<br></code></pre></td></tr></table></figure><p>此时输入 <code>rustc -V</code>应该看到如下字样：</p><p><img src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/blogos-armv8/1.png"></p><h4 id="为rust增加armv8支持"><a href="#为rust增加armv8支持" class="headerlink" title="为rust增加armv8支持"></a>为rust增加armv8支持</h4><p><code>cargo</code> 在编译内核时，可以用过 <code>--target &lt;target triple&gt;</code> 支持不同的系统。<strong>目标三元组 (target triple)</strong> 包含：cpu 架构、供应商、操作系统和 ABI 。</p><p>由于我们在编写自己的操作系统，所以所有目前的目标三元组都不适用。幸运的是，rust 允许我们用 JSON 文件定义自己的目标三元组。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">rustup target add aarch64-unknown-none-softfloat<br></code></pre></td></tr></table></figure><h4 id="安装QEMU模拟器"><a href="#安装QEMU模拟器" class="headerlink" title="安装QEMU模拟器"></a>安装QEMU模拟器</h4><p>实验指导书中，希望我们参考文档去安装 qemu 。然后给出的文档却是如何在本地编译 qemu 。这并没有必要，ubuntu 的 apt 软件库之中已经提供了现成的模拟器软件。我们可以直接通过如下命令安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get install qemu qemu-system-arm<br></code></pre></td></tr></table></figure><h4 id="安装交叉编译工具链-aarch64-及其调试工具"><a href="#安装交叉编译工具链-aarch64-及其调试工具" class="headerlink" title="安装交叉编译工具链 (aarch64) 及其调试工具"></a>安装交叉编译工具链 (aarch64) 及其调试工具</h4><p>交叉编译让我们能在<code>x86-64</code>架构中编译出能在<code>arm</code>架构执行的程序（两种架构底层的逻辑是不同的，以常规的编译方式，我们在<code>x86-64</code>下编译的程序无法在<code>arm</code>架构机器平台运行。这也是为什么在许多软件中，他会有多种统一系统的下载安装包。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget https://developer.arm.com/-/media/Files/downloads/gnu-a/10.2-2020.11/binrel/gcc-arm-10.2-2020.11-x86_64-aarch64-none-elf.tar.xz<br>tar -xf gcc-arm-10*<br>sudo <span class="hljs-built_in">cp</span> gcc-arm-10*/bin/* /usr/local/bin/<br><span class="hljs-built_in">rm</span> -rf gcc-arm-10*<br></code></pre></td></tr></table></figure><p>第三条的<code>copy</code>指令是将我们交叉编译的工具链完整的放进我们的环境中。实验指导书的该行代码只拷贝了必要的编译工具 <strong>（很不幸的是它唯独忘记了把gdb调试工具拷贝到其中）</strong>。在这里我选择完整拷贝交叉编译工具链。</p><hr><h3 id="构建最小化内核"><a href="#构建最小化内核" class="headerlink" title="构建最小化内核"></a>构建最小化内核</h3><p>构建最小化内核，那必须要知道对于一个裸机状态的机器来讲什么状态才可以称之为最小。单单使用实验中的代码并解读它并不能让我们知道这一点，我们仍然不知道为什么那是最小。所以我在网上翻阅相关资料，对照实验，一步一步的向内核中添加必要代码。</p><h4 id="能跑起来的裸机程序尝试"><a href="#能跑起来的裸机程序尝试" class="headerlink" title="能跑起来的裸机程序尝试"></a>能跑起来的裸机程序尝试</h4><p>试着创建一个<code>main</code>程序：新建项目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">cargo new blogos_armv8 --bin --edition 2021<br><span class="hljs-built_in">cd</span> blogos_armv8<br></code></pre></td></tr></table></figure><p>然后新建<code>src/main.rs</code>。此时<code>main</code>函数内容为空，因为我并不知道失去了标准库我还能在函数中使用什么代码。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-meta">#![no_std]</span><br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;&#125;<br></code></pre></td></tr></table></figure><p>然后<code>cargo build</code>进行构建，会产生两个报错：</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs subunit"><span class="hljs-keyword">error: </span>language item required, but not found: `eh_personality`<br><br><span class="hljs-keyword">error: </span>`#[panic_handler]` function required, but not found<br></code></pre></td></tr></table></figure><ul><li><p><code>eh_personality</code>报错：</p><blockquote><p>eh_personality 语义项(language item)用于标记函数：该函数在 堆栈展开(stack unwinding) 时被调用。当程序发生 panic 时，rust 会调用 堆栈展开 析构堆栈中的所有生存变量，达到释放内存的目的。但是这是一个复杂的过程，而且依赖于一些其他的库文件。所以我们只是简单的将其禁用：</p></blockquote><p>  编辑<code>Cargo.toml</code>，在后边加入如下代码:</p>  <figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs toml"><span class="hljs-comment"># dev时禁用panic时栈展开</span><br><span class="hljs-section">[profile.dev]</span><br><span class="hljs-attr">panic</span> = <span class="hljs-string">&quot;abort&quot;</span><br><br><span class="hljs-comment"># release时禁用panic时栈展开</span><br><span class="hljs-section">[profile.release]</span><br><span class="hljs-attr">panic</span> = <span class="hljs-string">&quot;abort&quot;</span><br></code></pre></td></tr></table></figure></li><li><p><code>panic</code>报错：</p><blockquote><p>当程序出现异常时（程序并没有运行，但是这在编译阶段就会主动链接<code>panic</code>)，程序将会进入<code>panic</code>，此时需要调用相应函数。标准库有对应函数，但是由于我们使用了 <code>no_std</code> 属性，所以接下来我们需要自己实现一个函数。新建<code>src/panic.rs</code></p></blockquote>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cargo">use core::panic::PanicInfo;<br><br>#[panic_handler]<br>fn on_panic(_info: &amp;PanicInfo) -&gt; ! &#123;<br>    loop &#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>  然后在<code>main.rs</code>中引入<code>panic</code></p>  <figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">mod</span> panic;<br></code></pre></td></tr></table></figure><p>  <del>由于程序 panic 后就应该结束，所以用 -&gt; ! 表示该函数不会返回。由于目前的 OS 功能还很弱小，我们有希望系统保持开机状态，所以只能无限循环。</del></p><p>  这里之前找资料是这么说的。然后跟老师探讨时才发现错了。这里的<code>panic</code>里要用<code>loop</code>死循环处理属于是rust的特性。<code>panic</code>在rust中被规定必须是一个发散函数：</p><p>  发散函数（<code>diverging function</code>）是rust中的一个特性。发散函数不返回，它使用感叹号!作为返回类型表示。当程序调用发散函数时，该进程将直接进入崩溃（一般上来讲是发生程序员无法处理的错误时调用）。而如何在函数中表示其不返回？rust规定了以下三种情形：</p><ol><li><code>panic!</code>以及基于它实现的各种函数&#x2F;宏，比如<code>unimplemented!</code>、<code>unreachable!</code>；</li><li>无限循环<code>loop&#123;&#125;</code>；</li><li>进程退出函数<code>std::process::exit</code>以及类似的<code>libc</code>中的<code>exec</code>一类函数。</li></ol><p>由于我们不适用rust提供的标准库，故只能以死循环这样一种方式来编写我们的<code>panic</code>函数。而在我们的程序运行完后就结束了（并不保持开机），也不会调用panic。换言之，编写panic只是因为它是个必需的函数，但我们并不调用它。</p></li></ul><hr><p>解决完如上几个报错后，再次<code>cargo build</code>，出现新的报错：</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs subunit"><span class="hljs-keyword">error: </span>requires `start` lang_item<br></code></pre></td></tr></table></figure><ul><li><p><code>start</code>入口报错</p><blockquote><p>对于大多数语言，他们都使用了 运行时系统(runtime system) ，这导致 main 并不是他们执行的第一个函数。以 rust 语言为例：一个典型的 rust 程序会先链接标准库，然后运行 C runtime library 中的 crt0(C runtime zero) 设置 C 程序运行所需要的环境(比如：创建堆栈，设置寄存器参数等)。然后 C runtime 会调用 rust runtime 的 入口点(entry point) 。rust runtime 结束之后才会调用 main 。由于我们的程序无法访问 rust runtime 和 crt0 ，所以需要重写覆盖 crt0 入口点：</p></blockquote><p>  新建<code>src/start.s</code>，告诉函数我们程序的进入入口在哪：</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.globl _start<br>.extern LD_STACK_PTR<br>.section &quot;.text.boot&quot;<br><br>_start:<br>        ldr     x30, =LD_STACK_PTR<br>        mov     sp, x30<br>        bl      not_main<br><br>.equ PSCI_SYSTEM_OFF, 0x84000002<br>.globl system_off<br>system_off:<br>        ldr     x0, =PSCI_SYSTEM_OFF<br>        hvc     #0<br></code></pre></td></tr></table></figure><p>  可以看到我们想告诉程序：我们这玩意的入口是<code>not_main</code>，程序要从<code>not_main</code>函数开始。然后修改<code>main.rs</code>，将主函数删除，替换成：</p>  <figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-meta">#![no_main]</span><br><br><span class="hljs-meta">#[no_mangle]</span> <span class="hljs-comment">// 不修改函数名</span><br><span class="hljs-keyword">pub</span> <span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">not_main</span>() &#123;&#125;<br></code></pre></td></tr></table></figure><p>  这里 <code>pub extern &quot;C&quot; fn not_main</code> 就是我们需要的 <code>start</code> 。 <code>#[no_mangle]</code> 属性用于防止改名称被混淆。</p><p>  由于 <code>start</code> 只能由操作系统或引导加载程序直接调用，不会被其他函数调用，所以不能够返回。如果需要离开该函数，应该使用 <code>exit</code> 系统调用。</p><p>  由于 start 函数无法返回或退出，自然也就不会调用 main 。所以将 main 函数删除，并且增加属性标签 <code>#![no_main]</code> 。</p><p>  然后修改程序启动例程：创建<code>aarch64-qemu.ld</code>，输入：</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs ld">ENTRY(_start)<br>SECTIONS<br>&#123;<br>    . = 0x40080000;<br>    .text.boot : &#123; *(.text.boot) &#125;<br>    .text : &#123; *(.text) &#125;<br>    .data : &#123; *(.data) &#125;<br>    .rodata : &#123; *(.rodata) &#125;<br>    .bss : &#123; *(.bss) &#125;<br><br>    . = ALIGN(8);<br>    . = . + 0x4000;<br>    LD_STACK_PTR = .;<br>&#125;<br></code></pre></td></tr></table></figure><p>  ENTRY(_start)中指明入口函数为_start函数，该函数在start.s中。</p><p>  通过 . &#x3D; 0x40080000; 将程序安排在内存位置0x40080000开始的地方。</p><p>  链接脚本中的符号LD_STACK_PTR是全局符号，可以在程序中使用（如start.s中），这里定义的是栈底的位置。</p></li></ul><hr><p>再次构建项目，却告诉我们汇编代码有问题：</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs subunit"><span class="hljs-keyword">error: </span>unknown token in expression<br></code></pre></td></tr></table></figure><ul><li><p>汇编报错</p><blockquote><p>由于我们使用的是<code>arm</code>架构的汇编代码，自然用正常的编译方式这段汇编代码无法被正确解读。此时我们需要给<code>cargo</code>说明我们要编译的是给<code>arm</code>的代码：</p></blockquote>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">cargo build --target aarch64-unknown-none-softfloat<br></code></pre></td></tr></table></figure><p>  为了方便，我们采用另一种方式：</p><p>  新建<code>.cargo/config.toml</code>，输入：</p>  <figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs toml"><span class="hljs-section">[build]</span><br><span class="hljs-attr">target</span> = <span class="hljs-string">&quot;aarch64-unknown-none-softfloat&quot;</span><br><span class="hljs-attr">rustflags</span> = [<span class="hljs-string">&quot;-C&quot;</span>,<span class="hljs-string">&quot;link-arg=-Taarch64-qemu.ld&quot;</span>, <span class="hljs-string">&quot;-C&quot;</span>, <span class="hljs-string">&quot;target-cpu=cortex-a53&quot;</span>, <span class="hljs-string">&quot;-D&quot;</span>, <span class="hljs-string">&quot;warnings&quot;</span>]<br></code></pre></td></tr></table></figure><p>  构建指令就仍然可以采用简短的<code>cargo build</code></p></li></ul><hr><p>再次尝试编译，出现如下错误：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">error: linking with `rust-lld` failed: <span class="hljs-keyword">exit</span> status: <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><ul><li><p>rust-lld报错：</p><blockquote><p>上节我们讲到需要构建原生目标三元组（而现有的三元组或多或少的都带有标准库），所以需要自己定义：</p></blockquote><p>  新建<code>aarch64-unknown-none-softfloat.json</code>，配置目标平台相关参数，内容如下：</p>  <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;abi-blacklist&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-string">&quot;stdcall&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;fastcall&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;vectorcall&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;thiscall&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;win64&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;sysv64&quot;</span><br><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;arch&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;aarch64&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;data-layout&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;disable-redzone&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;env&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;executables&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;features&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;+strict-align,+neon,+fp-armv8&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;is-builtin&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">false</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;linker&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;rust-lld&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;linker-flavor&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ld.lld&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;linker-is-gnu&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;pre-link-args&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;ld.lld&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;-Taarch64-qemu.ld&quot;</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;llvm-target&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;aarch64-unknown-none&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;max-atomic-width&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">128</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;os&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;none&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;panic-strategy&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;abort&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;relocation-model&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;static&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;target-c-int-width&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;32&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;target-endian&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;little&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;target-pointer-width&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;64&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;vendor&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li></ul><hr><p>最后进行一次构建：</p><p><img src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/blogos-armv8/4.png" alt="裸机构建成功"></p><p>使用如下命令运行裸机程序：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">qemu-system-aarch64 -machine virt -m 1024M -cpu cortex-a53 -nographic -kernel target/aarch64-unknown-none-softfloat/debug/blogos_armv8<br></code></pre></td></tr></table></figure><p><img src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/blogos-armv8/2.png" alt="运行成功"></p><hr><h4 id="程序的开始：”Hello-World”"><a href="#程序的开始：”Hello-World”" class="headerlink" title="程序的开始：”Hello World”"></a>程序的开始：”Hello World”</h4><p>绝大部分程序员的第一个程序都是在屏幕上输出类似于<code>&quot;Hello World&quot;</code>这样的字样。不例外的，我们也让这个最小化内核构建成功后能够打印<code>&quot;Hello World&quot;</code>：</p><p>修改<code>main.rs</code>，将<code>not_main</code>函数修改成下面所示代码，并引用<code>core</code>库中的<code>ptr</code>模块：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">use</span> core::ptr;<br><br><span class="hljs-meta">#[no_mangle]</span> <span class="hljs-comment">// 不修改函数名</span><br><span class="hljs-keyword">pub</span> <span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">not_main</span>() &#123;<br>    <span class="hljs-keyword">const</span> UART0: *<span class="hljs-keyword">mut</span> <span class="hljs-type">u8</span> = <span class="hljs-number">0x0900_0000</span> <span class="hljs-keyword">as</span> *<span class="hljs-keyword">mut</span> <span class="hljs-type">u8</span>;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">out_str</span> = <span class="hljs-string">b&quot;Hello World&quot;</span>;<br>    <span class="hljs-keyword">for</span> <span class="hljs-variable">byte</span> <span class="hljs-keyword">in</span> out_str &#123;<br>        <span class="hljs-keyword">unsafe</span> &#123;<br>            ptr::<span class="hljs-title function_ invoke__">write_volatile</span>(UART0, *byte);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>其中<code>UART0</code>是异步串行接口，在这个程序中相当于控制台的外设输入输出。</p><p>not_main函数通过<code>ptr::write_volatile</code>向串口输出字符.</p></blockquote><p>这里相当于使用<code>ptr::write_volatile</code>直接向串口中循环输入字符。</p><p>再次构建并运行，可以看到：</p><p><img src="https://noionion-picture-bed.oss-cn-hangzhou.aliyuncs.com/blogos-armv8/3.png" alt="输出Hello World"></p><hr><h3 id="gdb调试"><a href="#gdb调试" class="headerlink" title="gdb调试"></a>gdb调试</h3><p>我们运行内核文件，是没办法像普通可执行文件那样，编译时增加<code>-g</code>指令然后<code>gdb</code>运行。因此我们要利用到<code>qemu</code>服务端功能，也就是开放端口让外部程序能够连接到<code>qemu</code>正在执行的程序中。</p><h4 id="qemu-启动参数"><a href="#qemu-启动参数" class="headerlink" title="qemu 启动参数"></a>qemu 启动参数</h4><p>下面是<code>qemu</code>的启动参数表：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">`-hda fil<span class="hljs-string">e&#x27;        `-hdb file&#x27;</span> `-hdc fil<span class="hljs-string">e&#x27; `-hdd file&#x27;</span><br>    使用 file  作为硬盘<span class="hljs-number">0</span>、<span class="hljs-number">1</span>、<span class="hljs-number">2</span>、<span class="hljs-number">3</span>镜像。<br>`-fda fil<span class="hljs-string">e&#x27;  `-fdb file&#x27;</span><br>    使用 file  作为软盘镜像，可以使用 /dev/fd0 作为 file 来使用主机软盘。<br>`-cdrom fil<span class="hljs-string">e&#x27;</span><br><span class="hljs-string">    使用 file  作为光盘镜像，可以使用 /dev/cdrom 作为 file 来使用主机 cd-rom。</span><br><span class="hljs-string">`-boot [a|c|d]&#x27;</span><br>    从软盘(a)、光盘(c)、硬盘启动(d)，默认硬盘启动。<br>`-<span class="hljs-keyword">snapshot</span><span class="hljs-string">&#x27;</span><br><span class="hljs-string">    写入临时文件而不写回磁盘镜像，可以使用 C-a s 来强制写回。</span><br><span class="hljs-string">`-m megs&#x27;</span><br>    设置虚拟内存为 msg M字节，默认为 <span class="hljs-number">128</span>M 字节。<br>`-smp n<span class="hljs-string">&#x27;</span><br><span class="hljs-string">    设置为有 n 个 CPU 的 SMP 系统。以 PC 为目标机，最多支持 255 个 CPU。</span><br><span class="hljs-string">`-nographic&#x27;</span><br>    禁止使用图形输出。<br>其他：<br>    可用的主机设备 dev 例如：<br>        vc<br>            虚拟终端。<br>        <span class="hljs-keyword">null</span><br>            空设备<br>        /dev/XXX<br>            使用主机的 tty。<br>        file: filename<br>            将输出写入到文件 filename 中。<br>        stdio<br>            标准输入/输出。<br>        pipe：pipename<br>            命令管道 pipename。<br>        等。<br>    使用 dev 设备的命令如：<br>        `-<span class="hljs-type">serial</span> dev<span class="hljs-string">&#x27;</span><br><span class="hljs-string">            重定向虚拟串口到主机设备 dev 中。</span><br><span class="hljs-string">        `-parallel dev&#x27;</span><br>            重定向虚拟并口到主机设备 dev 中。<br>        `-monitor dev<span class="hljs-string">&#x27;</span><br><span class="hljs-string">            重定向 monitor 到主机设备 dev 中。</span><br><span class="hljs-string">    其他参数：</span><br><span class="hljs-string">        `-s&#x27;</span><br>            等待 gdb 连接到端口 <span class="hljs-number">1234</span>。<br>        `-p port<span class="hljs-string">&#x27;</span><br><span class="hljs-string">            改变 gdb 连接端口到 port。</span><br><span class="hljs-string">        `-S&#x27;</span><br>            在启动时不启动 CPU， 需要在 monitor 中输入 <span class="hljs-string">&#x27;c&#x27;</span>，才能让qemu继续模拟工作。<br>        `-d<span class="hljs-string">&#x27;</span><br><span class="hljs-string">            输出日志到 qemu.log 文件。</span><br></code></pre></td></tr></table></figure><p>可以对照启动命令，来进行启动命令的解释，这里不做详解。</p><p>看到参数中<code>-S</code>和<code>-s</code>和<code>-p</code>，我们能知道如何启动<code>qemu</code>的服务端状态，开放相关的端口（默认<code>1234</code>来另<code>gdb</code>连接。</p><h4 id="启动调试"><a href="#启动调试" class="headerlink" title="启动调试"></a>启动调试</h4><p>为了与<code>qemu</code>配合进行源代码级别的调试，需要先让<code>qemu</code>进入<strong>等待gdb调试器的接入</strong>并且<strong>还不能让qemu中的CPU执行</strong>，因此启动qemu的时候，我们需要使用参数<code>-S –s</code>这两个参数来做到这一点，这相当于在<strong>本地的1234端口</strong>开启远程调试功能。</p><p>在qemu内核启动命令后加上<code>-S -s</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">qemu-system-aarch64 -machine virt -m 1024M -cpu cortex-a53 -nographic -kernel target/aarch64-unknown-none-softfloat/debug/blogos_armv8 -S -s<br></code></pre></td></tr></table></figure><p>内核不会马上运行，开始等待<code>gdb</code>的接管。由于我们是写给<code>arm</code>平台的操作系统，自然也需要<code>arm</code>平台的<code>gdb</code>调试工具。在项目根目录中，我们调用交叉编译工具链中的<code>aarch64-none-elf-gdb</code>工具来对程序进行调试。</p><p>保持<code>qemu</code>继续运行，新建一个终端后，在终端中输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">aarch64-none-elf-gdb target/aarch64-unknown-none-softfloat/debug/blogos_armv8<br></code></pre></td></tr></table></figure><p>在<code>gdb</code>调试界面中输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gdb">(gdb) target remote localhost:1234<br></code></pre></td></tr></table></figure><p>连接到<code>qemu</code>中正在准备开始执行的内核后，可以像正常的<code>gdb</code>调试去调试我们的内核。</p>]]></content>
    
    
    <categories>
      
      <category>BlogOS_for_armv8</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Course</tag>
      
      <tag>os</tag>
      
      <tag>rust</tag>
      
      <tag>blogos</tag>
      
      <tag>armv8</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>rust写个操作系统——课程实验blogos移至armV8深度解析</title>
    <link href="/16433.html"/>
    <url>/16433.html</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>不能不说，我看着实验指导书给好的现成的代码，不知道这些代码到底在干什么。我陷入了沉思，作为一个想学习嵌入式系统的学生而言，我似乎不能从这个实验中学到些什么。</p><p>然而这些知识，理应是一个想做嵌入式的人应该有的，但看着现成代码再看注解，大部分情况下还是一头雾水。老师说理解原理，但又理解不能，于是去翻阅资料。只有一步步实现，才能更好的知道我们为什么要这么做。</p><p>很多的代码细节，我也仍然没办法去一行行解释。面对想学的东西，更多的还是保持求知欲和不厌其烦。</p><p>路漫漫其修远兮，吾将上下而求索，说的莫若如是。</p><div class="note note-primary">            <p><strong>仓库地址</strong>：<a href="https://github.com/2X-ercha/blogOS-armV8">https://github.com/2X-ercha/blogOS-armV8</a>，能不能求一个<code>star</code>呢？</p>          </div><div class="note note-info">            <p><strong>想要速通实验</strong>？请转 <a href="https://acmezone.top/2022/02/26/BlogOS%EF%BC%9AARM-v8%E4%B9%8B%E6%97%85/">AcmeZone: BlogOS：ARM v8之旅</a></p>          </div><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><div class="note note-success">            <ul><li><p><strong>2022-04-18 实验一完成</strong></p><p>仓库地址：<a href="https://github.com/2X-ercha/blogOS-armV8/tree/lab1">https://github.com/2X-ercha/blogOS-armV8/tree/lab1</a></p><p>文章地址: <a href="/adfdff.html">https://noionion.top/adfdff.html</a></p></li><li><p><strong>2022-04-19 实验二完成</strong></p><p>仓库地址：<a href="https://github.com/2X-ercha/blogOS-armV8/tree/lab2">https://github.com/2X-ercha/blogOS-armV8/tree/lab2</a></p><p>文章地址: <a href="/4735f31b.html">https://noionion.top/4735f31b.html</a></p></li><li><p><strong>2022-04-24 实验四完成</strong></p><p>仓库地址：<a href="https://github.com/2X-ercha/blogOS-armV8/tree/lab4">https://github.com/2X-ercha/blogOS-armV8/tree/lab4</a></p><p>文章地址: <a href="/a4c75e16.html">https://noionion.top/a4c75e16.html</a></p></li><li><p><strong>2022-04-25 实验五完成</strong></p><p>仓库地址：<a href="https://github.com/2X-ercha/blogOS-armV8/tree/lab5">https://github.com/2X-ercha/blogOS-armV8/tree/lab5</a></p><p>文章地址: <a href="/82ab7cd4.html">https://noionion.top/82ab7cd4.html</a></p></li><li><p><strong>2022-04-26 实验六完成</strong></p><p>仓库地址：<a href="https://github.com/2X-ercha/blogOS-armV8/tree/lab6">https://github.com/2X-ercha/blogOS-armV8/tree/lab6</a></p><p>文章地址: <a href="/ec262d5c.html">https://noionion.top/ec262d5c.html</a></p></li><li><p><strong>2022-05-14 实验七完成</strong></p><p>仓库地址：<a href="https://github.com/2X-ercha/blogOS-armV8/tree/lab7">https://github.com/2X-ercha/blogOS-armV8/tree/lab7</a></p><p>文章地址: <a href="/b484f477.html">https://noionion.top/b484f477.html</a></p></li></ul>          </div><h2 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h2><div class="note note-danger">            <ul><li><p><strong>2022-05-13 详解勘误并修改</strong></p><p>跟老师探讨后，发现前六个实验有一部分发生较大的理解错误。在此进行一次勘误。主要勘误部分有：</p><ul><li><p>panic的作用 <a href="/adfdff.html#%E8%83%BD%E8%B7%91%E8%B5%B7%E6%9D%A5%E7%9A%84%E8%A3%B8%E6%9C%BA%E7%A8%8B%E5%BA%8F%E5%B0%9D%E8%AF%95">（定位到勘误点）</a></p></li><li><p>程序维持执行的<code>loop</code>和汇编<code>wfi</code>的作用 <a href="/a4c75e16.html#%E6%97%B6%E9%92%9F%E4%B8%AD%E6%96%AD%E6%9C%8D%E5%8A%A1">（定位到勘误点）</a></p></li><li><p>最小化内核构建中的部分错误</p></li></ul></li></ul>          </div>]]></content>
    
    
    <categories>
      
      <category>BlogOS_for_armv8</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Course</tag>
      
      <tag>os</tag>
      
      <tag>rust</tag>
      
      <tag>blogos</tag>
      
      <tag>armv8</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
